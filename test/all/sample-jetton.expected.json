{
  "kind": "warnings",
  "warnings": [
    {
      "detectorId": "NeverAccessedVariables",
      "description": "Variable queryId is never accessed",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 312,
        "column": 9,
        "code": "  311 |         let op: Int = msg.loadUint(32);\n> 312 |         let queryId: Int = msg.loadUint(64);\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  313 |         let jettonAmount: Int = msg.loadCoins();\n"
      },
      "suppressed": false,
      "severity": 3,
      "category": 1,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/NeverAccessedVariables",
      "suggestion": "Consider removing the variable",
      "quickfixes": []
    },
    {
      "detectorId": "SuboptimalSend",
      "description": "Prefer `message` over `send`",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 70,
        "column": 13,
        "code": "  69 |         if (msg.response_destination != null) { // Cashback\n> 70 |             send(SendParameters{\n                   ^~~~~~~~~~~~~~~~~~~~\n  71 |                 to: msg.response_destination!!, \n"
      },
      "suppressed": false,
      "severity": 3,
      "category": 2,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend",
      "suggestion": "Use more gas-efficient `message` function: https://docs.tact-lang.org/ref/core-common/#message",
      "quickfixes": []
    },
    {
      "detectorId": "SuboptimalSend",
      "description": "Prefer `deploy` over `send`",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 92,
        "column": 9,
        "code": "  91 |         let wInit: StateInit = self.getJettonWalletInit(to); // Create message\n> 92 |         send(SendParameters{\n               ^~~~~~~~~~~~~~~~~~~~\n  93 |             to: contractAddress(wInit), \n"
      },
      "suppressed": false,
      "severity": 3,
      "category": 2,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend",
      "suggestion": "Use more gas-efficient `deploy` function: https://docs.tact-lang.org/ref/core-common/#deploy",
      "quickfixes": []
    },
    {
      "detectorId": "SuboptimalSend",
      "description": "Prefer `deploy` over `send`",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 218,
        "column": 9,
        "code": "  217 |         let walletAddress: Address = contractAddress(init);\n> 218 |         send(SendParameters{\n                ^~~~~~~~~~~~~~~~~~~~\n  219 |                 to: walletAddress, \n"
      },
      "suppressed": false,
      "severity": 3,
      "category": 2,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend",
      "suggestion": "Use more gas-efficient `deploy` function: https://docs.tact-lang.org/ref/core-common/#deploy",
      "quickfixes": []
    },
    {
      "detectorId": "SuboptimalSend",
      "description": "Prefer `message` over `send`",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 248,
        "column": 13,
        "code": "  247 |         if (msg.forward_ton_amount > 0) { \n> 248 |             send(SendParameters{\n                    ^~~~~~~~~~~~~~~~~~~~\n  249 |                 to: self.owner,\n"
      },
      "suppressed": false,
      "severity": 3,
      "category": 2,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend",
      "suggestion": "Use more gas-efficient `message` function: https://docs.tact-lang.org/ref/core-common/#message",
      "quickfixes": []
    },
    {
      "detectorId": "SuboptimalSend",
      "description": "Prefer `message` over `send`",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 267,
        "column": 17,
        "code": "  266 |         if (msg.response_destination != null) { // Cashback\n> 267 |                 send(SendParameters {\n                        ^~~~~~~~~~~~~~~~~~~~~\n  268 |                     to: msg.response_destination!!, \n"
      },
      "suppressed": false,
      "severity": 3,
      "category": 2,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend",
      "suggestion": "Use more gas-efficient `message` function: https://docs.tact-lang.org/ref/core-common/#message",
      "quickfixes": []
    },
    {
      "detectorId": "SuboptimalSend",
      "description": "Prefer `message` over `send`",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 296,
        "column": 9,
        "code": "  295 | \n> 296 |         send(SendParameters{  // Burn tokens\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  297 |             to: self.master,\n"
      },
      "suppressed": false,
      "severity": 3,
      "category": 2,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend",
      "suggestion": "Use more gas-efficient `message` function: https://docs.tact-lang.org/ref/core-common/#message",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 33,
        "column": 9,
        "code": "  32 |         let ctx: Context = context();\n> 33 |         require(ctx.sender == self.owner, \"Not Owner\");\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  34 |         require(self.mintable, \"Can't Mint Anymore\");\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 34,
        "column": 9,
        "code": "  33 |         require(ctx.sender == self.owner, \"Not Owner\");\n> 34 |         require(self.mintable, \"Can't Mint Anymore\");\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  35 |         self.mint(msg.receiver, msg.amount, self.owner); //(to, amount, response_destination)\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 40,
        "column": 9,
        "code": "  39 |         let ctx: Context = context();\n> 40 |         require(self.mintable, \"Can't Mint Anymore\");\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  41 |         self.mint(ctx.sender, 100, self.owner);\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 46,
        "column": 9,
        "code": "  45 |         let ctx: Context = context();\n> 46 |         require(ctx.sender == self.owner, \"Not Owner\");\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  47 |         self.mintable = false;\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 88,
        "column": 9,
        "code": "  87 | \n> 88 |         require(self.totalSupply + amount <= self.max_supply, \"The total supply will be overlapping.\");\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  89 |         self.totalSupply = self.totalSupply + amount; // Update total supply\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 113,
        "column": 9,
        "code": "  112 |         let wInit: StateInit = self.getJettonWalletInit(owner);\n> 113 |         require(contractAddress(wInit) == ctx.sender, \"Invalid sender\");\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  114 |     }\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 207,
        "column": 9,
        "code": "  206 |         let ctx: Context = context(); // Check sender\n> 207 |         require(ctx.sender == self.owner, \"Invalid sender\");\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  208 | \n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 211,
        "column": 9,
        "code": "  210 |         let final: Int =  2 * self.gasConsumption + self.minTonsForStorage + fwdFee;\n> 211 |         require(ctx.value > min(final, ton(\"0.01\")), \"Invalid value!!\"); \n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  212 | \n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 214,
        "column": 9,
        "code": "  213 |         self.balance = self.balance - msg.amount; // Update balance\n> 214 |         require(self.balance >= 0, \"Invalid balance\");\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  215 | \n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 241,
        "column": 13,
        "code": "  240 |             let sInit: StateInit = initOf JettonDefaultWallet(self.master, msg.from);\n> 241 |             require(contractAddress(sInit) == ctx.sender, \"Invalid sender!\");\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  242 |         }\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 245,
        "column": 9,
        "code": "  244 |         self.balance = self.balance + msg.amount;\n> 245 |         require(self.balance >= 0, \"Invalid balance\"); // Update balance\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  246 | \n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 288,
        "column": 9,
        "code": "  287 |         let ctx: Context = context();\n> 288 |         require(ctx.sender == self.owner, \"Invalid sender\");  // Check sender\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  289 | \n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 291,
        "column": 9,
        "code": "  290 |         self.balance = self.balance - msg.amount; // Update balance\n> 291 |         require(self.balance >= 0, \"Invalid balance\");\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  292 | \n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 294,
        "column": 9,
        "code": "  293 |         let fwdFee: Int = ctx.readForwardFee(); // Gas checks\n> 294 |         require(ctx.value > fwdFee + 2 * self.gasConsumption + self.minTonsForStorage, \"Invalid value - Burn\");\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  295 | \n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "PreferredStdlibApi",
      "description": "require has a more gas-effective alternative: throwUnless",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 314,
        "column": 9,
        "code": "  313 |         let jettonAmount: Int = msg.loadCoins();\n> 314 |         require(op == 0x178d4519 || op == 0x7bdd97de, \"Invalid bounced message\");\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  315 |         \n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "`throwUnless` is preferred in production because it is more gas-efficient.",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi",
      "suggestion": "require should be replaced with a more gas-effective alternative: throwUnless",
      "quickfixes": []
    },
    {
      "detectorId": "InheritedStateMutation",
      "description": "Inherited trait field mintable is mutated",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 47,
        "column": 9,
        "code": "  46 |         require(ctx.sender == self.owner, \"Not Owner\");\n> 47 |         self.mintable = false;\n               ^~~~~~~~~~~~~~~~~~~~~~\n  48 |     }\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 3,
      "extraDescription": "Directly modifying inherited trait fields can indicate a potential error or poor design",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/InheritedStateMutation",
      "suggestion": "Consider using setter methods to preserve invariants",
      "quickfixes": []
    },
    {
      "detectorId": "PreferBinaryReceiver",
      "description": "Prefer binary receiver",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 38,
        "column": 5,
        "code": "  37 | \n> 38 |     receive(\"Mint: 100\") { // Public Minting\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  39 |         let ctx: Context = context();\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "Using text receivers is a gas-expensive operation",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferBinaryReceiver",
      "suggestion": "Consider changing it to a binary receiver",
      "quickfixes": []
    },
    {
      "detectorId": "PreferBinaryReceiver",
      "description": "Prefer binary receiver",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 44,
        "column": 5,
        "code": "  43 | \n> 44 |     receive(\"Owner: MintClose\") {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  45 |         let ctx: Context = context();\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "Using text receivers is a gas-expensive operation",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferBinaryReceiver",
      "suggestion": "Consider changing it to a binary receiver",
      "quickfixes": []
    },
    {
      "detectorId": "PreferSenderFunction",
      "description": "Code can be optimized by using `sender()` instead of accessing context",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 32,
        "column": 13,
        "code": "  31 |     receive(msg: Mint) {\n> 32 |         let ctx: Context = context();\n                   ^~~\n  33 |         require(ctx.sender == self.owner, \"Not Owner\");\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "The `ctx` variable is only used to get the sender",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferSenderFunction",
      "suggestion": "Consider replacing `ctx.sender` with the less gas-expensive `sender()` call",
      "quickfixes": []
    },
    {
      "detectorId": "PreferSenderFunction",
      "description": "Code can be optimized by using `sender()` instead of accessing context",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 39,
        "column": 13,
        "code": "  38 |     receive(\"Mint: 100\") { // Public Minting\n> 39 |         let ctx: Context = context();\n                   ^~~\n  40 |         require(self.mintable, \"Can't Mint Anymore\");\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "The `ctx` variable is only used to get the sender",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferSenderFunction",
      "suggestion": "Consider replacing `ctx.sender` with the less gas-expensive `sender()` call",
      "quickfixes": []
    },
    {
      "detectorId": "PreferSenderFunction",
      "description": "Code can be optimized by using `sender()` instead of accessing context",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 45,
        "column": 13,
        "code": "  44 |     receive(\"Owner: MintClose\") {\n> 45 |         let ctx: Context = context();\n                   ^~~\n  46 |         require(ctx.sender == self.owner, \"Not Owner\");\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "The `ctx` variable is only used to get the sender",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferSenderFunction",
      "suggestion": "Consider replacing `ctx.sender` with the less gas-expensive `sender()` call",
      "quickfixes": []
    },
    {
      "detectorId": "PreferSenderFunction",
      "description": "Code can be optimized by using `sender()` instead of accessing context",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 111,
        "column": 13,
        "code": "  110 |     fun requireWallet(owner: Address) {\n> 111 |         let ctx: Context = context();\n                    ^~~\n  112 |         let wInit: StateInit = self.getJettonWalletInit(owner);\n"
      },
      "suppressed": false,
      "severity": 2,
      "category": 2,
      "extraDescription": "The `ctx` variable is only used to get the sender",
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferSenderFunction",
      "suggestion": "Consider replacing `ctx.sender` with the less gas-expensive `sender()` call",
      "quickfixes": []
    },
    {
      "detectorId": "PreferAugmentedAssign",
      "description": "Prefer augmented assignment: self.totalSupply -= msg.amount",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 67,
        "column": 9,
        "code": "  66 |         self.requireWallet(msg.owner);                     // Check wallet\n> 67 |         self.totalSupply = self.totalSupply - msg.amount; // Update supply\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  68 | \n"
      },
      "suppressed": false,
      "severity": 1,
      "category": 3,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign",
      "suggestion": "Consider using augmented assignment instead: self.totalSupply -= msg.amount",
      "quickfixes": []
    },
    {
      "detectorId": "PreferAugmentedAssign",
      "description": "Prefer augmented assignment: self.totalSupply += amount",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 89,
        "column": 9,
        "code": "  88 |         require(self.totalSupply + amount <= self.max_supply, \"The total supply will be overlapping.\");\n> 89 |         self.totalSupply = self.totalSupply + amount; // Update total supply\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  90 | \n"
      },
      "suppressed": false,
      "severity": 1,
      "category": 3,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign",
      "suggestion": "Consider using augmented assignment instead: self.totalSupply += amount",
      "quickfixes": []
    },
    {
      "detectorId": "PreferAugmentedAssign",
      "description": "Prefer augmented assignment: self.balance -= msg.amount",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 213,
        "column": 9,
        "code": "  212 | \n> 213 |         self.balance = self.balance - msg.amount; // Update balance\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  214 |         require(self.balance >= 0, \"Invalid balance\");\n"
      },
      "suppressed": false,
      "severity": 1,
      "category": 3,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign",
      "suggestion": "Consider using augmented assignment instead: self.balance -= msg.amount",
      "quickfixes": []
    },
    {
      "detectorId": "PreferAugmentedAssign",
      "description": "Prefer augmented assignment: self.balance += msg.amount",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 244,
        "column": 9,
        "code": "  243 | \n> 244 |         self.balance = self.balance + msg.amount;\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  245 |         require(self.balance >= 0, \"Invalid balance\"); // Update balance\n"
      },
      "suppressed": false,
      "severity": 1,
      "category": 3,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign",
      "suggestion": "Consider using augmented assignment instead: self.balance += msg.amount",
      "quickfixes": []
    },
    {
      "detectorId": "PreferAugmentedAssign",
      "description": "Prefer augmented assignment: self.balance -= msg.amount",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 290,
        "column": 9,
        "code": "  289 | \n> 290 |         self.balance = self.balance - msg.amount; // Update balance\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  291 |         require(self.balance >= 0, \"Invalid balance\");\n"
      },
      "suppressed": false,
      "severity": 1,
      "category": 3,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign",
      "suggestion": "Consider using augmented assignment instead: self.balance -= msg.amount",
      "quickfixes": []
    },
    {
      "detectorId": "PreferAugmentedAssign",
      "description": "Prefer augmented assignment: self.balance += jettonAmount",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 316,
        "column": 9,
        "code": "  315 |         \n> 316 |         self.balance = self.balance + jettonAmount; // Update balance\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  317 |     }\n"
      },
      "suppressed": false,
      "severity": 1,
      "category": 3,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign",
      "suggestion": "Consider using augmented assignment instead: self.balance += jettonAmount",
      "quickfixes": []
    },
    {
      "detectorId": "ImplicitOpcode",
      "description": "Message `Mint` has an implicit opcode",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 3,
        "column": 1,
        "code": "  2 | \n> 3 | message Mint {\n      ^~~~~~~~~~~~~~\n  4 |     amount: Int;\n"
      },
      "suppressed": false,
      "severity": 1,
      "category": 3,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/ImplicitOpcode",
      "suggestion": "Prefer explicitly defined message opcodes",
      "quickfixes": []
    },
    {
      "detectorId": "ImplicitOpcode",
      "description": "Message `TokenUpdateContent` has an implicit opcode",
      "location": {
        "file": "test/all/sample-jetton.tact",
        "line": 183,
        "column": 1,
        "code": "  182 | \n> 183 | message TokenUpdateContent {\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  184 |     content: Cell;\n"
      },
      "suppressed": false,
      "severity": 1,
      "category": 3,
      "docURL": "https://nowarp.io/tools/misti/docs/detectors/ImplicitOpcode",
      "suggestion": "Prefer explicitly defined message opcodes",
      "quickfixes": []
    }
  ],
  "logs": {
    "debug": [
      "Enabled detectors (36): DivideBeforeMultiply, ReadOnlyVariables, NeverAccessedVariables, UnboundLoop, ZeroAddress, ConstantAddress, BranchDuplicate, DumpIsUsed, FieldDoubleInit, PreferAugmentedAssign, StringReceiversOverlap, AsmIsUsed, PreferredStdlibApi, InheritedStateMutation, ArgCopyMutation, OptimalMathFunction, DuplicatedCondition, UnusedOptional, EnsurePrgSeed, FalseCondition, SendInLoop, UnboundMap, StateMutationInGetter, UnusedExpressionResult, SuspiciousMessageMode, ShortCircuitCondition, EtaLikeSimplifications, ExitCodeUsage, CellBounds, UnprotectedCall, SuspiciousLoop, SuboptimalSend, PreferBinaryReceiver, PreferSenderFunction, ImplicitOpcode, SuboptimalCellOperation",
      "Enabled tools (0): ",
      "Parsing project sample-jetton ...",
      "Parsing completed: sample-jetton",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   424 |     let b: StringBuilder = beginComment();\n> 425 |     b.append(self);\n            ^\n  426 |     return b.toCell();\n\nUnsupported contract method access: id",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   524 | extends fun fromBase64(self: Slice): Slice {\n> 525 |     let size: Int = self.bits() / 8;\n                            ^~~~\n  526 |     let result: Builder = beginCell();\n\nAccessing an unknown contract: self",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   528 |     repeat (size) {\n> 529 |         let code: Int = self.loadUint(8);\n                                ^~~~\n  530 |         if (code >= 65 && code <= 90) { // A-Z\n\nAccessing an unknown contract: self",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   530 |         if (code >= 65 && code <= 90) { // A-Z\n> 531 |             result = result.storeUint(code - 65, 6);\n                             ^~~~~~\n  532 |         } else if (code >= 97 && code <= 122) { // a-z\n\nUnsupported contract method access: id",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   532 |         } else if (code >= 97 && code <= 122) { // a-z\n> 533 |             result = result.storeUint(code - (97 - 26), 6);\n                             ^~~~~~\n  534 |         } else if (code >= 48 && code <= 57) { // 0-9\n\nUnsupported contract method access: id",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   534 |         } else if (code >= 48 && code <= 57) { // 0-9\n> 535 |             result = result.storeUint(code + (52 - 48), 6);\n                             ^~~~~~\n  536 |         } else if (code == 45 || code == 43) { // - or +\n\nUnsupported contract method access: id",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   536 |         } else if (code == 45 || code == 43) { // - or +\n> 537 |             result = result.storeUint(62, 6);\n                             ^~~~~~\n  538 |         } else if (code == 95 || code == 47) { // _ or /\n\nUnsupported contract method access: id",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   538 |         } else if (code == 95 || code == 47) { // _ or /\n> 539 |             result = result.storeUint(63, 6);\n                             ^~~~~~\n  540 |         } else if (code == 61) { // =\n\nUnsupported contract method access: id",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   547 |     // Padding\n> 548 |     let total: Int = result.bits();\n                             ^~~~~~\n  549 |     let padding: Int = total % 8;\n\nUnsupported contract method access: id",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/text.tact:   550 |     if (padding != 0) {\n> 551 |         let s: Slice = result.asSlice();\n                               ^~~~~~\n  552 |         return s.loadBits(total - padding);\n\nUnsupported contract method access: id",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/contract.tact:   141 | inline extends fun hasSameBasechainAddress(self: StateInit, address: Address): Bool {\n> 142 |     let addressHash = parseStdAddress(address.asSlice()).address;\n                                              ^~~~~~~\n  143 |     let baseAddress = contractBasechainAddress(self);\n\nUnsupported contract method access: id",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/send.tact:   582 |     //                     maybe: stateInit (false) bodyRef: bool (true)\n> 583 |     let c: Cell = beginCell()\n                          ^~~~~~~~~~~\n  584 |         .storeUint(15211807202738752817960438464513, 104)\n\nUnsupported contract method access: method_call",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/send.tact:   582 |     //                     maybe: stateInit (false) bodyRef: bool (true)\n> 583 |     let c: Cell = beginCell()\n                          ^~~~~~~~~~~\n  584 |         .storeUint(15211807202738752817960438464513, 104)\n\nUnsupported contract method access: method_call",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/send.tact:   582 |     //                     maybe: stateInit (false) bodyRef: bool (true)\n> 583 |     let c: Cell = beginCell()\n                          ^~~~~~~~~~~\n  584 |         .storeUint(15211807202738752817960438464513, 104)\n\nUnsupported contract method access: static_call",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/address.tact:   28 |     // 256 bits for the address itself\n> 29 |     throwUnless(TactExitCodeInvalidStandardAddress, self.bits() == 267);\n                                                           ^~~~\n  30 | \n\nAccessing an unknown contract: self",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/address.tact:   33 |         // i.e. internal address prefix and chain ID -1\n> 34 |         throwUnless(TactExitCodeInvalidStandardAddress, self.preloadUint(11) == 1279);\n                                                               ^~~~\n  35 |     } else {\n\nAccessing an unknown contract: self",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/std/internal/address.tact:   37 |         // but do not verify the chain ID\n> 38 |         throwUnless(TactExitCodeInvalidStandardAddress, self.preloadUint(3) == 4);\n                                                               ^~~~\n  39 |     }\n\nAccessing an unknown contract: self",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/libs/ownable.tact:   102 |         // Check if the sender is the owner\n> 103 |         self.requireOwner();\n                ^~~~\n  104 | \n\nAccessing an unknown contract: self",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/libs/ownable.tact:   108 |         // Reply result\n> 109 |         self.reply(ChangeOwnerOk { queryId: msg.queryId, newOwner: msg.newOwner }.toCell());\n                ^~~~\n  110 |     }\n\nAccessing an unknown contract: self",
      "node_modules/@tact-lang/compiler/dist/stdlib/stdlib/libs/ownable.tact:   108 |         // Reply result\n> 109 |         self.reply(ChangeOwnerOk { queryId: msg.queryId, newOwner: msg.newOwner }.toCell());\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  110 |     }\n\nUnsupported contract method access: struct_instance",
      "test/all/sample-jetton.tact:   34 |         require(self.mintable, \"Can't Mint Anymore\");\n> 35 |         self.mint(msg.receiver, msg.amount, self.owner); //(to, amount, response_destination)\n               ^~~~\n  36 |     }\n\nAccessing an unknown contract: self",
      "test/all/sample-jetton.tact:   40 |         require(self.mintable, \"Can't Mint Anymore\");\n> 41 |         self.mint(ctx.sender, 100, self.owner);\n               ^~~~\n  42 |     }\n\nAccessing an unknown contract: self",
      "test/all/sample-jetton.tact:   60 |     receive(msg: TokenUpdateContent) {\n> 61 |         self.requireOwner();                // Allow changing content only by owner\n               ^~~~\n  62 |         self.content = msg.content;         // Update content\n\nAccessing an unknown contract: self",
      "test/all/sample-jetton.tact:   65 |     receive(msg: TokenBurnNotification) {\n> 66 |         self.requireWallet(msg.owner);                     // Check wallet\n               ^~~~\n  67 |         self.totalSupply = self.totalSupply - msg.amount; // Update supply\n\nAccessing an unknown contract: self",
      "test/all/sample-jetton.tact:   74 |                 mode: SendRemainingValue | SendIgnoreErrors,\n> 75 |                 body: TokenExcesses{\n                             ^~~~~~~~~~~~~~\n  76 |                     queryId: msg.queryId\n\nUnsupported contract method access: struct_instance",
      "test/all/sample-jetton.tact:   90 | \n> 91 |         let wInit: StateInit = self.getJettonWalletInit(to); // Create message\n                                      ^~~~\n  92 |         send(SendParameters{\n\nAccessing an unknown contract: self",
      "test/all/sample-jetton.tact:   96 |             mode: SendRemainingValue,\n> 97 |             body: TokenTransferInternal{ \n                         ^~~~~~~~~~~~~~~~~~~~~~~\n  98 |                 queryId: 0,\n\nUnsupported contract method access: struct_instance",
      "test/all/sample-jetton.tact:   111 |         let ctx: Context = context();\n> 112 |         let wInit: StateInit = self.getJettonWalletInit(owner);\n                                       ^~~~\n  113 |         require(contractAddress(wInit) == ctx.sender, \"Invalid sender\");\n\nAccessing an unknown contract: self",
      "test/all/sample-jetton.tact:   121 |     get fun get_jetton_data(): JettonData {\n> 122 |         let code: Cell = self.getJettonWalletInit(myAddress()).code;\n                                 ^~~~\n  123 |         return JettonData{ \n\nAccessing an unknown contract: self",
      "test/all/sample-jetton.tact:   132 |     get fun get_wallet_address(owner: Address): Address {\n> 133 |         let wInit: StateInit = self.getJettonWalletInit(owner);\n                                       ^~~~\n  134 |         return contractAddress(wInit);\n\nAccessing an unknown contract: self",
      "test/all/sample-jetton.tact:   208 | \n> 209 |         let fwdFee: Int = ctx.readForwardFee() + ctx.readForwardFee();  // Gas checks\n                                  ^~~\n  210 |         let final: Int =  2 * self.gasConsumption + self.minTonsForStorage + fwdFee;\n\nUnsupported contract method access: id",
      "test/all/sample-jetton.tact:   208 | \n> 209 |         let fwdFee: Int = ctx.readForwardFee() + ctx.readForwardFee();  // Gas checks\n                                                         ^~~\n  210 |         let final: Int =  2 * self.gasConsumption + self.minTonsForStorage + fwdFee;\n\nUnsupported contract method access: id",
      "test/all/sample-jetton.tact:   222 |                 bounce: false,\n> 223 |                 body: TokenTransferInternal{\n                              ^~~~~~~~~~~~~~~~~~~~~~\n  224 |                     queryId: msg.queryId,\n\nUnsupported contract method access: struct_instance",
      "test/all/sample-jetton.tact:   251 |                 bounce: false,\n> 252 |                 body: TokenNotification { // 0x7362d09c - notify new owner\n                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  253 |                     queryId: msg.queryId,\n\nUnsupported contract method access: struct_instance",
      "test/all/sample-jetton.tact:   260 | \n> 261 |         let msgValue: Int = self.msgValue(ctx.value);  // Get value for gas\n                                    ^~~~\n  262 |         let fwdFee: Int = ctx.readForwardFee();\n\nAccessing an unknown contract: self",
      "test/all/sample-jetton.tact:   261 |         let msgValue: Int = self.msgValue(ctx.value);  // Get value for gas\n> 262 |         let fwdFee: Int = ctx.readForwardFee();\n                                  ^~~\n  263 |         msgValue = msgValue - msg.forward_ton_amount - fwdFee;\n\nUnsupported contract method access: id",
      "test/all/sample-jetton.tact:   270 |                     bounce: false,\n> 271 |                     body: TokenExcesses { // 0xd53276db\n                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  272 |                         queryId: msg.queryId\n\nUnsupported contract method access: struct_instance",
      "test/all/sample-jetton.tact:   292 | \n> 293 |         let fwdFee: Int = ctx.readForwardFee(); // Gas checks\n                                  ^~~\n  294 |         require(ctx.value > fwdFee + 2 * self.gasConsumption + self.minTonsForStorage, \"Invalid value - Burn\");\n\nUnsupported contract method access: id",
      "test/all/sample-jetton.tact:   300 |             bounce: true,\n> 301 |             body: TokenBurnNotification{\n                          ^~~~~~~~~~~~~~~~~~~~~~\n  302 |                 queryId: msg.queryId,\n\nUnsupported contract method access: struct_instance",
      "test/all/sample-jetton.tact:   310 |     bounced(msg: Slice) {\n> 311 |         let op: Int = msg.loadUint(32);\n                              ^~~\n  312 |         let queryId: Int = msg.loadUint(64);\n\nUnsupported contract method access: id",
      "test/all/sample-jetton.tact:   311 |         let op: Int = msg.loadUint(32);\n> 312 |         let queryId: Int = msg.loadUint(64);\n                                   ^~~\n  313 |         let jettonAmount: Int = msg.loadCoins();\n\nUnsupported contract method access: id",
      "test/all/sample-jetton.tact:   312 |         let queryId: Int = msg.loadUint(64);\n> 313 |         let jettonAmount: Int = msg.loadCoins();\n                                        ^~~\n  314 |         require(op == 0x178d4519 || op == 0x7bdd97de, \"Invalid bounced message\");\n\nUnsupported contract method access: id",
      "CGNode created without AST ID for function \"context\"",
      "CGNode created without AST ID for function \"require\"",
      "CGNode created without AST ID for function \"SampleJetton::mint\"",
      "CGNode created without AST ID for function \"Jetton::requireOwner\"",
      "CGNode created without AST ID for function \"send\"",
      "CGNode created without AST ID for function \"myAddress\"",
      "CGNode created without AST ID for function \"emptySlice\"",
      "CGNode created without AST ID for function \"ctx::readForwardFee\"",
      "CGNode created without AST ID for function \"min\"",
      "CGNode created without AST ID for function \"ton\"",
      "CGNode created without AST ID for function \"myBalance\"",
      "CGNode created without AST ID for function \"msg::loadUint\"",
      "CGNode created without AST ID for function \"msg::loadCoins\""
    ],
    "info": [],
    "warn": [],
    "error": []
  }
}