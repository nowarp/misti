[MEDIUM] NeverAccessedVariables: Variable queryId is never accessed
test/all/sample-jetton.tact:312:9:
  311 |         let op: Int = msg.loadUint(32);
> 312 |         let queryId: Int = msg.loadUint(64);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  313 |         let jettonAmount: Int = msg.loadCoins();
Help: Consider removing the variable
See: https://nowarp.io/tools/misti/docs/detectors/NeverAccessedVariables

[MEDIUM] SuboptimalSend: Prefer `message` over `send`
test/all/sample-jetton.tact:70:13:
  69 |         if (msg.response_destination != null) { // Cashback
> 70 |             send(SendParameters{
                   ^~~~~~~~~~~~~~~~~~~~
  71 |                 to: msg.response_destination!!, 
Help: Use more gas-efficient `message` function: https://docs.tact-lang.org/ref/core-common/#message
See: https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend

[MEDIUM] SuboptimalSend: Prefer `deploy` over `send`
test/all/sample-jetton.tact:92:9:
  91 |         let wInit: StateInit = self.getJettonWalletInit(to); // Create message
> 92 |         send(SendParameters{
               ^~~~~~~~~~~~~~~~~~~~
  93 |             to: contractAddress(wInit), 
Help: Use more gas-efficient `deploy` function: https://docs.tact-lang.org/ref/core-common/#deploy
See: https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend

[MEDIUM] SuboptimalSend: Prefer `deploy` over `send`
test/all/sample-jetton.tact:218:9:
  217 |         let walletAddress: Address = contractAddress(init);
> 218 |         send(SendParameters{
                ^~~~~~~~~~~~~~~~~~~~
  219 |                 to: walletAddress, 
Help: Use more gas-efficient `deploy` function: https://docs.tact-lang.org/ref/core-common/#deploy
See: https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend

[MEDIUM] SuboptimalSend: Prefer `message` over `send`
test/all/sample-jetton.tact:248:13:
  247 |         if (msg.forward_ton_amount > 0) { 
> 248 |             send(SendParameters{
                    ^~~~~~~~~~~~~~~~~~~~
  249 |                 to: self.owner,
Help: Use more gas-efficient `message` function: https://docs.tact-lang.org/ref/core-common/#message
See: https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend

[MEDIUM] SuboptimalSend: Prefer `message` over `send`
test/all/sample-jetton.tact:267:17:
  266 |         if (msg.response_destination != null) { // Cashback
> 267 |                 send(SendParameters {
                        ^~~~~~~~~~~~~~~~~~~~~
  268 |                     to: msg.response_destination!!, 
Help: Use more gas-efficient `message` function: https://docs.tact-lang.org/ref/core-common/#message
See: https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend

[MEDIUM] SuboptimalSend: Prefer `message` over `send`
test/all/sample-jetton.tact:296:9:
  295 | 
> 296 |         send(SendParameters{  // Burn tokens
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  297 |             to: self.master,
Help: Use more gas-efficient `message` function: https://docs.tact-lang.org/ref/core-common/#message
See: https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend

[LOW] InheritedStateMutation: Inherited trait field mintable is mutated
test/all/sample-jetton.tact:47:9:
  46 |         require(ctx.sender == self.owner, "Not Owner");
> 47 |         self.mintable = false;
               ^~~~~~~~~~~~~~~~~~~~~~
  48 |     }
Directly modifying inherited trait fields can indicate a potential error or poor design
Help: Consider using setter methods to preserve invariants
See: https://nowarp.io/tools/misti/docs/detectors/InheritedStateMutation

[LOW] PreferBinaryReceiver: Prefer binary receiver
test/all/sample-jetton.tact:38:5:
  37 | 
> 38 |     receive("Mint: 100") { // Public Minting
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  39 |         let ctx: Context = context();
Using text receivers is a gas-expensive operation
Help: Consider changing it to a binary receiver
See: https://nowarp.io/tools/misti/docs/detectors/PreferBinaryReceiver

[LOW] PreferBinaryReceiver: Prefer binary receiver
test/all/sample-jetton.tact:44:5:
  43 | 
> 44 |     receive("Owner: MintClose") {
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  45 |         let ctx: Context = context();
Using text receivers is a gas-expensive operation
Help: Consider changing it to a binary receiver
See: https://nowarp.io/tools/misti/docs/detectors/PreferBinaryReceiver

[LOW] PreferSenderFunction: Code can be optimized by using `sender()` instead of accessing context
test/all/sample-jetton.tact:32:13:
  31 |     receive(msg: Mint) {
> 32 |         let ctx: Context = context();
                   ^~~
  33 |         require(ctx.sender == self.owner, "Not Owner");
The `ctx` variable is only used to get the sender
Help: Consider replacing `ctx.sender` with the less gas-expensive `sender()` call
See: https://nowarp.io/tools/misti/docs/detectors/PreferSenderFunction

[LOW] PreferSenderFunction: Code can be optimized by using `sender()` instead of accessing context
test/all/sample-jetton.tact:39:13:
  38 |     receive("Mint: 100") { // Public Minting
> 39 |         let ctx: Context = context();
                   ^~~
  40 |         require(self.mintable, "Can't Mint Anymore");
The `ctx` variable is only used to get the sender
Help: Consider replacing `ctx.sender` with the less gas-expensive `sender()` call
See: https://nowarp.io/tools/misti/docs/detectors/PreferSenderFunction

[LOW] PreferSenderFunction: Code can be optimized by using `sender()` instead of accessing context
test/all/sample-jetton.tact:45:13:
  44 |     receive("Owner: MintClose") {
> 45 |         let ctx: Context = context();
                   ^~~
  46 |         require(ctx.sender == self.owner, "Not Owner");
The `ctx` variable is only used to get the sender
Help: Consider replacing `ctx.sender` with the less gas-expensive `sender()` call
See: https://nowarp.io/tools/misti/docs/detectors/PreferSenderFunction

[LOW] PreferSenderFunction: Code can be optimized by using `sender()` instead of accessing context
test/all/sample-jetton.tact:111:13:
  110 |     fun requireWallet(owner: Address) {
> 111 |         let ctx: Context = context();
                    ^~~
  112 |         let wInit: StateInit = self.getJettonWalletInit(owner);
The `ctx` variable is only used to get the sender
Help: Consider replacing `ctx.sender` with the less gas-expensive `sender()` call
See: https://nowarp.io/tools/misti/docs/detectors/PreferSenderFunction

[INFO] PreferAugmentedAssign: Prefer augmented assignment: self.totalSupply -= msg.amount
test/all/sample-jetton.tact:67:9:
  66 |         self.requireWallet(msg.owner);                     // Check wallet
> 67 |         self.totalSupply = self.totalSupply - msg.amount; // Update supply
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  68 | 
Help: Consider using augmented assignment instead: self.totalSupply -= msg.amount
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: self.totalSupply += amount
test/all/sample-jetton.tact:89:9:
  88 |         require(self.totalSupply + amount <= self.max_supply, "The total supply will be overlapping.");
> 89 |         self.totalSupply = self.totalSupply + amount; // Update total supply
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  90 | 
Help: Consider using augmented assignment instead: self.totalSupply += amount
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: self.balance -= msg.amount
test/all/sample-jetton.tact:213:9:
  212 | 
> 213 |         self.balance = self.balance - msg.amount; // Update balance
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  214 |         require(self.balance >= 0, "Invalid balance");
Help: Consider using augmented assignment instead: self.balance -= msg.amount
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: self.balance += msg.amount
test/all/sample-jetton.tact:244:9:
  243 | 
> 244 |         self.balance = self.balance + msg.amount;
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  245 |         require(self.balance >= 0, "Invalid balance"); // Update balance
Help: Consider using augmented assignment instead: self.balance += msg.amount
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: self.balance -= msg.amount
test/all/sample-jetton.tact:290:9:
  289 | 
> 290 |         self.balance = self.balance - msg.amount; // Update balance
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  291 |         require(self.balance >= 0, "Invalid balance");
Help: Consider using augmented assignment instead: self.balance -= msg.amount
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: self.balance += jettonAmount
test/all/sample-jetton.tact:316:9:
  315 |         
> 316 |         self.balance = self.balance + jettonAmount; // Update balance
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  317 |     }
Help: Consider using augmented assignment instead: self.balance += jettonAmount
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:33:9:
  32 |         let ctx: Context = context();
> 33 |         require(ctx.sender == self.owner, "Not Owner");
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  34 |         require(self.mintable, "Can't Mint Anymore");
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:34:9:
  33 |         require(ctx.sender == self.owner, "Not Owner");
> 34 |         require(self.mintable, "Can't Mint Anymore");
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  35 |         self.mint(msg.receiver, msg.amount, self.owner); //(to, amount, response_destination)
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:40:9:
  39 |         let ctx: Context = context();
> 40 |         require(self.mintable, "Can't Mint Anymore");
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  41 |         self.mint(ctx.sender, 100, self.owner);
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:46:9:
  45 |         let ctx: Context = context();
> 46 |         require(ctx.sender == self.owner, "Not Owner");
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  47 |         self.mintable = false;
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:88:9:
  87 | 
> 88 |         require(self.totalSupply + amount <= self.max_supply, "The total supply will be overlapping.");
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  89 |         self.totalSupply = self.totalSupply + amount; // Update total supply
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:113:9:
  112 |         let wInit: StateInit = self.getJettonWalletInit(owner);
> 113 |         require(contractAddress(wInit) == ctx.sender, "Invalid sender");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  114 |     }
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:207:9:
  206 |         let ctx: Context = context(); // Check sender
> 207 |         require(ctx.sender == self.owner, "Invalid sender");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  208 | 
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:211:9:
  210 |         let final: Int =  2 * self.gasConsumption + self.minTonsForStorage + fwdFee;
> 211 |         require(ctx.value > min(final, ton("0.01")), "Invalid value!!"); 
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  212 | 
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:214:9:
  213 |         self.balance = self.balance - msg.amount; // Update balance
> 214 |         require(self.balance >= 0, "Invalid balance");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  215 | 
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:241:13:
  240 |             let sInit: StateInit = initOf JettonDefaultWallet(self.master, msg.from);
> 241 |             require(contractAddress(sInit) == ctx.sender, "Invalid sender!");
                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  242 |         }
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:245:9:
  244 |         self.balance = self.balance + msg.amount;
> 245 |         require(self.balance >= 0, "Invalid balance"); // Update balance
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  246 | 
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:288:9:
  287 |         let ctx: Context = context();
> 288 |         require(ctx.sender == self.owner, "Invalid sender");  // Check sender
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  289 | 
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:291:9:
  290 |         self.balance = self.balance - msg.amount; // Update balance
> 291 |         require(self.balance >= 0, "Invalid balance");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  292 | 
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:294:9:
  293 |         let fwdFee: Int = ctx.readForwardFee(); // Gas checks
> 294 |         require(ctx.value > fwdFee + 2 * self.gasConsumption + self.minTonsForStorage, "Invalid value - Burn");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  295 | 
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] PreferredStdlibApi: require has a more gas-effective alternative: throwUnless
test/all/sample-jetton.tact:314:9:
  313 |         let jettonAmount: Int = msg.loadCoins();
> 314 |         require(op == 0x178d4519 || op == 0x7bdd97de, "Invalid bounced message");
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  315 |         
`throwUnless` is preferred in production because it is more gas-efficient.
Help: require should be replaced with a more gas-effective alternative: throwUnless
See: https://nowarp.io/tools/misti/docs/detectors/PreferredStdlibApi

[INFO] ImplicitOpcode: Message `Mint` has an implicit opcode
test/all/sample-jetton.tact:3:1:
  2 | 
> 3 | message Mint {
      ^~~~~~~~~~~~~~
  4 |     amount: Int;
Help: Prefer explicitly defined message opcodes
See: https://nowarp.io/tools/misti/docs/detectors/ImplicitOpcode

[INFO] ImplicitOpcode: Message `TokenUpdateContent` has an implicit opcode
test/all/sample-jetton.tact:183:1:
  182 | 
> 183 | message TokenUpdateContent {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
  184 |     content: Cell;
Help: Prefer explicitly defined message opcodes
See: https://nowarp.io/tools/misti/docs/detectors/ImplicitOpcode