[MEDIUM] NeverAccessedVariables: Variable value is never accessed
test/all/syntax.tact:125:9:
  124 |     fun funcWithStateRead() {
> 125 |         let value = self.addr;
                ^~~~~~~~~~~~~~~~~~~~~~
  126 |     }
Help: Consider removing the variable
See: https://nowarp.io/tools/misti/docs/detectors/NeverAccessedVariables

[MEDIUM] NeverAccessedVariables: Variable currentTime is never accessed
test/all/syntax.tact:141:9:
  140 |     fun funcWithMultipleEffects() {
> 141 |         let currentTime: Int = now();
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  142 |         let randValue: Int = random(1, 100);
Help: Consider removing the variable
See: https://nowarp.io/tools/misti/docs/detectors/NeverAccessedVariables

[MEDIUM] NeverAccessedVariables: Variable randValue is never accessed
test/all/syntax.tact:142:9:
  141 |         let currentTime: Int = now();
> 142 |         let randValue: Int = random(1, 100);
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  143 |         if (1 > 42) {
Help: Consider removing the variable
See: https://nowarp.io/tools/misti/docs/detectors/NeverAccessedVariables

[MEDIUM] FalseCondition: Condition always evaluates to false
test/all/syntax.tact:143:9:
  142 |         let randValue: Int = random(1, 100);
> 143 |         if (1 > 42) {
                ^~~~~~~~~~~~~
  144 |             nativeRandomizeLt();
Help: Remove the condition
See: https://nowarp.io/tools/misti/docs/detectors/FalseCondition

[MEDIUM] SuspiciousLoop: Infinite loop detected
test/all/syntax.tact:166:16:
  165 |     receive() {
> 166 |         while (true) {
                       ^~~~
  167 |             self.m.set(1, 2);
Help: Avoid unbounded conditions in loops
See: https://nowarp.io/tools/misti/docs/detectors/SuspiciousLoop

[MEDIUM] SuboptimalSend: Prefer `message` over `send`
test/all/syntax.tact:120:9:
  119 |         let amount: Int = 100;
> 120 |         send(SendParameters{ to: self.addr, value: amount });
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  121 |     }
Help: Use more gas-efficient `message` function: https://docs.tact-lang.org/ref/core-common/#message
See: https://nowarp.io/tools/misti/docs/detectors/SuboptimalSend

[LOW] ZeroAddress: Using zero address
test/all/syntax.tact:130:35:
  129 |     fun funcWithStateWrite1() {
> 130 |         self.addr = newAddress(0, 0);
                                          ^
  131 |         self.b.storeAddress(self.addr);
Help: Consider changing code to avoid using it. For example, you could pass the address during the deployment.
See: https://nowarp.io/tools/misti/docs/detectors/ZeroAddress

[LOW] UnboundMap: Map self.m could be unbound
test/all/syntax.tact:161:5:
  160 | contract A {
> 161 |     m: map<Int, Int> = null;
            ^~~~~~~~~~~~~~~~~~~~~~~
  162 |     get fun m(): map<Int, Int> {
There are operations adding elements to this map, but there is no API to remove them
Help: Consider adding a method to remove elements or suppress this warning
See: https://nowarp.io/tools/misti/docs/detectors/UnboundMap

[INFO] DumpIsUsed: Found `dump` usage
test/all/syntax.tact:41:35:
  40 |     try { /* empty */ }
> 41 |     try { a = 19; } catch (err) { dump(err); }
                                         ^~~~~~~~~
  42 | }
Using `dump` in production code can sometimes indicate complex code that requires additional review

See: https://nowarp.io/tools/misti/docs/detectors/DumpIsUsed

[INFO] DumpIsUsed: Found `dump` usage
test/all/syntax.tact:67:9:
  66 |     } catch (err) {
> 67 |         dump(err);
               ^~~~~~~~~
  68 |     }
Using `dump` in production code can sometimes indicate complex code that requires additional review

See: https://nowarp.io/tools/misti/docs/detectors/DumpIsUsed

[INFO] PreferAugmentedAssign: Prefer augmented assignment: i += 1
test/all/syntax.tact:48:7:
  47 |     while (i < 10) {
> 48 |       i = i + 1;
             ^~~~~~~~~~
  49 |       sum = sum + i;
Help: Consider using augmented assignment instead: i += 1
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: sum += i
test/all/syntax.tact:49:7:
  48 |       i = i + 1;
> 49 |       sum = sum + i;
             ^~~~~~~~~~~~~~
  50 |     }
Help: Consider using augmented assignment instead: sum += i
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: i -= 1
test/all/syntax.tact:52:7:
  51 |     do {
> 52 |       i = i - 1;
             ^~~~~~~~~~
  53 |       sum = sum + i;
Help: Consider using augmented assignment instead: i -= 1
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: sum += i
test/all/syntax.tact:53:7:
  52 |       i = i - 1;
> 53 |       sum = sum + i;
             ^~~~~~~~~~~~~~
  54 |     } until (i > 10);
Help: Consider using augmented assignment instead: sum += i
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: i += 1
test/all/syntax.tact:56:7:
  55 |     repeat (10) {
> 56 |       i = i + 1;
             ^~~~~~~~~~
  57 |       sum = sum + i;
Help: Consider using augmented assignment instead: i += 1
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: sum += i
test/all/syntax.tact:57:7:
  56 |       i = i + 1;
> 57 |       sum = sum + i;
             ^~~~~~~~~~~~~~
  58 |     }
Help: Consider using augmented assignment instead: sum += i
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: i += 1
test/all/syntax.tact:76:9:
  75 |     while (i < 10) {
> 76 |         i = i + 1;
               ^~~~~~~~~~
  77 |         sum = sum + i;
Help: Consider using augmented assignment instead: i += 1
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: sum += i
test/all/syntax.tact:77:9:
  76 |         i = i + 1;
> 77 |         sum = sum + i;
               ^~~~~~~~~~~~~~
  78 |     }
Help: Consider using augmented assignment instead: sum += i
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: i -= 1
test/all/syntax.tact:81:9:
  80 |     do {
> 81 |         i = i - 1;
               ^~~~~~~~~~
  82 |         sum = sum + i;
Help: Consider using augmented assignment instead: i -= 1
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: sum += i
test/all/syntax.tact:82:9:
  81 |         i = i - 1;
> 82 |         sum = sum + i;
               ^~~~~~~~~~~~~~
  83 |     } until (i <= 0);
Help: Consider using augmented assignment instead: sum += i
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: i += 1
test/all/syntax.tact:86:9:
  85 |     repeat (10) {
> 86 |         i = i + 1;
               ^~~~~~~~~~
  87 |         sum = sum + i;
Help: Consider using augmented assignment instead: i += 1
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: sum += i
test/all/syntax.tact:87:9:
  86 |         i = i + 1;
> 87 |         sum = sum + i;
               ^~~~~~~~~~~~~~
  88 |     }
Help: Consider using augmented assignment instead: sum += i
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] PreferAugmentedAssign: Prefer augmented assignment: sum += value
test/all/syntax.tact:96:9:
  95 |     foreach (key, value in m) {
> 96 |         sum = sum + value;
               ^~~~~~~~~~~~~~~~~~
  97 |     }
Help: Consider using augmented assignment instead: sum += value
See: https://nowarp.io/tools/misti/docs/detectors/PreferAugmentedAssign

[INFO] AsmIsUsed: asm function is used
test/all/syntax.tact:156:1:
  155 | // Checks if we add asm functions to IR entries correctly
> 156 | asm(-> 1 0) extends mutates fun loadRefEx(self: Slice): Cell { LDREF }
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  157 | fun callAsm(s: Slice): Cell { return s.loadRefEx(); }
Using TVM assembly is a potentially dangerous operation that requires additional review

See: https://nowarp.io/tools/misti/docs/detectors/AsmIsUsed