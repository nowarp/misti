graph TD
subgraph test_try
    test_try_81["try"]
    test_try_82["a += 1"]
    test_try_83["try"]
    test_try_84["try ... catch (err)"]
    test_try_85["a = 19"]:::exitNode
    test_try_86["dump(err)"]:::exitNode
    test_try_81 --> test_try_82
    test_try_82 --> test_try_83
    test_try_83 --> test_try_84
    test_try_84 --> test_try_85
    test_try_84 --> test_try_86
end
subgraph test_loops
    test_loops_87["let sum: Int = 0"]
    test_loops_88["let i: Int = 0"]
    test_loops_89["while (i &lt; 10)"]
    test_loops_90["i = i + 1"]
    test_loops_91["sum = sum + i"]
    test_loops_92["until (i &gt; 10)"]
    test_loops_93["i = i - 1"]
    test_loops_94["sum = sum + i"]
    test_loops_95["repeat (10)"]
    test_loops_96["i = i + 1"]
    test_loops_97["sum = sum + i"]
    test_loops_98["let m: map&lt;Int, Int&gt; = emptyMap()"]
    test_loops_99["foreach ((k, v) of m)"]
    test_loops_87 --> test_loops_88
    test_loops_88 --> test_loops_89
    test_loops_89 --> test_loops_90
    test_loops_90 --> test_loops_91
    test_loops_91 --> test_loops_89
    test_loops_89 --> test_loops_92
    test_loops_92 --> test_loops_93
    test_loops_93 --> test_loops_94
    test_loops_94 --> test_loops_92
    test_loops_92 --> test_loops_95
    test_loops_95 --> test_loops_96
    test_loops_96 --> test_loops_97
    test_loops_97 --> test_loops_95
    test_loops_95 --> test_loops_98
    test_loops_98 --> test_loops_99
    test_loops_99 --> test_loops_99
end
subgraph testTryCatch
    testTryCatch_100["try ... catch (err)"]
    testTryCatch_101["a += 1"]:::exitNode
    testTryCatch_102["dump(err)"]:::exitNode
    testTryCatch_100 --> testTryCatch_101
    testTryCatch_100 --> testTryCatch_102
end
subgraph testLoops
    testLoops_103["let sum: Int = 0"]
    testLoops_104["let i: Int = 0"]
    testLoops_105["while (i &lt; 10)"]
    testLoops_106["i = i + 1"]
    testLoops_107["sum = sum + i"]
    testLoops_108["until (i &lt;= 0)"]
    testLoops_109["i = i - 1"]
    testLoops_110["sum = sum + i"]
    testLoops_111["repeat (10)"]
    testLoops_112["i = i + 1"]
    testLoops_113["sum = sum + i"]
    testLoops_114["let m: map&lt;Int, Int&gt; = emptyMap()"]
    testLoops_115["m.set(1, 10)"]
    testLoops_116["m.set(2, 20)"]
    testLoops_117["m.set(3, 30)"]
    testLoops_118["foreach ((key, value) of m)"]
    testLoops_119["sum = sum + value"]
    testLoops_103 --> testLoops_104
    testLoops_104 --> testLoops_105
    testLoops_105 --> testLoops_106
    testLoops_106 --> testLoops_107
    testLoops_107 --> testLoops_105
    testLoops_105 --> testLoops_108
    testLoops_108 --> testLoops_109
    testLoops_109 --> testLoops_110
    testLoops_110 --> testLoops_108
    testLoops_108 --> testLoops_111
    testLoops_111 --> testLoops_112
    testLoops_112 --> testLoops_113
    testLoops_113 --> testLoops_111
    testLoops_111 --> testLoops_114
    testLoops_114 --> testLoops_115
    testLoops_115 --> testLoops_116
    testLoops_116 --> testLoops_117
    testLoops_117 --> testLoops_118
    testLoops_118 --> testLoops_119
    testLoops_119 --> testLoops_118
end
subgraph callAsm
    callAsm_120["return s.loadRefEx()"]:::exitNode
end
subgraph toInt
    toInt_121["let string: Slice = self.asSlice()"]
    toInt_122["let acc: Int = 0"]
    toInt_123["while (!string.empty())"]
    toInt_124["let char: Int = string.loadUint(8)"]
    toInt_125["acc = acc * 10 + (char - 48)"]
    toInt_126["return acc"]:::exitNode
    toInt_121 --> toInt_122
    toInt_122 --> toInt_123
    toInt_123 --> toInt_124
    toInt_124 --> toInt_125
    toInt_125 --> toInt_123
    toInt_123 --> toInt_126
end
subgraph TestContract__getter
    TestContract__getter_167["return 0"]:::exitNode
end
subgraph TestContractF__test
end
subgraph TestContractT__test
    TestContractT__test_170["return self.getA()"]:::exitNode
end
subgraph TestContractT__receive_external_fallback_2540
end
subgraph EffectTest__init_2864
    EffectTest__init_2864_171["self.addr = sender()"]
    EffectTest__init_2864_172["self.b = beginCell()"]
    EffectTest__init_2864_173["self.s = S{b: beginCell()}"]:::exitNode
    EffectTest__init_2864_171 --> EffectTest__init_2864_172
    EffectTest__init_2864_172 --> EffectTest__init_2864_173
end
subgraph EffectTest__funcWithSend
    EffectTest__funcWithSend_174["let amount: Int = 100"]
    EffectTest__funcWithSend_175["send(SendParameters{to: self.addr, value: amount})"]:::exitNode
    EffectTest__funcWithSend_174 --> EffectTest__funcWithSend_175
end
subgraph EffectTest__funcWithStateRead
    EffectTest__funcWithStateRead_176["let value = self.addr"]:::exitNode
end
subgraph EffectTest__funcWithStateWrite1
    EffectTest__funcWithStateWrite1_177["self.addr = newAddress(0, 0)"]
    EffectTest__funcWithStateWrite1_178["self.b.storeAddress(self.addr)"]
    EffectTest__funcWithStateWrite1_179["self.s.b.storeAddress(self.addr)"]:::exitNode
    EffectTest__funcWithStateWrite1_177 --> EffectTest__funcWithStateWrite1_178
    EffectTest__funcWithStateWrite1_178 --> EffectTest__funcWithStateWrite1_179
end
subgraph EffectTest__funcWithStateWrite2
    EffectTest__funcWithStateWrite2_180["return s.loadAddress()"]:::exitNode
end
subgraph EffectTest__funcWithMultipleEffects
    EffectTest__funcWithMultipleEffects_181["let currentTime: Int = now()"]
    EffectTest__funcWithMultipleEffects_182["let randValue: Int = random(1, 100)"]
    EffectTest__funcWithMultipleEffects_183["if (1 &gt; 42)"]
    EffectTest__funcWithMultipleEffects_184["nativeRandomizeLt()"]:::exitNode
    EffectTest__funcWithMultipleEffects_181 --> EffectTest__funcWithMultipleEffects_182
    EffectTest__funcWithMultipleEffects_182 --> EffectTest__funcWithMultipleEffects_183
    EffectTest__funcWithMultipleEffects_183 --> EffectTest__funcWithMultipleEffects_184
end
subgraph EffectTest__receive_internal_fallback_2863
    EffectTest__receive_internal_fallback_2863_185["let a = beginString()"]
    EffectTest__receive_internal_fallback_2863_186["a.append('f')"]:::exitNode
    EffectTest__receive_internal_fallback_2863_185 --> EffectTest__receive_internal_fallback_2863_186
end
subgraph A__m
    A__m_187["return self.m"]:::exitNode
end
subgraph A__receive_internal_fallback_2913
    A__receive_internal_fallback_2913_188["while (true)"]
    A__receive_internal_fallback_2913_189["self.m.set(1, 2)"]
    A__receive_internal_fallback_2913_188 --> A__receive_internal_fallback_2913_189
    A__receive_internal_fallback_2913_189 --> A__receive_internal_fallback_2913_188
end
subgraph ContractParams__receive_internal_fallback_2967
end
subgraph TestQuickFix__f1
    TestQuickFix__f1_190["while (false)"]
    TestQuickFix__f1_191["while (false)"]
    TestQuickFix__f1_192["dump('something')"]
    TestQuickFix__f1_193["if (1 == 2)"]
    TestQuickFix__f1_194["return true"]:::exitNode
    TestQuickFix__f1_195["return false"]:::exitNode
    TestQuickFix__f1_190 --> TestQuickFix__f1_190
    TestQuickFix__f1_190 --> TestQuickFix__f1_191
    TestQuickFix__f1_191 --> TestQuickFix__f1_192
    TestQuickFix__f1_192 --> TestQuickFix__f1_191
    TestQuickFix__f1_191 --> TestQuickFix__f1_193
    TestQuickFix__f1_193 --> TestQuickFix__f1_194
    TestQuickFix__f1_193 --> TestQuickFix__f1_195
end
subgraph Z__getter
    Z__getter_168["return self.a + 1"]:::exitNode
end
subgraph TParent__getA
    TParent__getA_169["return self.a"]:::exitNode
end
