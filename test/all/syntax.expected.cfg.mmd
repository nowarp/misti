graph TD
subgraph test_try
    test_try_71["try"]
    test_try_72["a += 1"]
    test_try_73["try"]
    test_try_74["try ... catch (err)"]
    test_try_75["a = 19"]:::exitNode
    test_try_76["dump(err)"]:::exitNode
    test_try_71 --> test_try_72
    test_try_72 --> test_try_73
    test_try_73 --> test_try_74
    test_try_74 --> test_try_75
    test_try_74 --> test_try_76
end
subgraph test_loops
    test_loops_77["let sum: Int = 0"]
    test_loops_78["let i: Int = 0"]
    test_loops_79["while (i &lt; 10)"]
    test_loops_80["i = i + 1"]
    test_loops_81["sum = sum + i"]
    test_loops_82["until (i &gt; 10)"]
    test_loops_83["i = i - 1"]
    test_loops_84["sum = sum + i"]
    test_loops_85["repeat (10)"]
    test_loops_86["i = i + 1"]
    test_loops_87["sum = sum + i"]
    test_loops_88["let m: map&lt;Int, Int&gt; = emptyMap()"]
    test_loops_89["foreach ((k, v) of m)"]
    test_loops_77 --> test_loops_78
    test_loops_78 --> test_loops_79
    test_loops_79 --> test_loops_80
    test_loops_80 --> test_loops_81
    test_loops_81 --> test_loops_79
    test_loops_79 --> test_loops_82
    test_loops_82 --> test_loops_83
    test_loops_83 --> test_loops_84
    test_loops_84 --> test_loops_82
    test_loops_82 --> test_loops_85
    test_loops_85 --> test_loops_86
    test_loops_86 --> test_loops_87
    test_loops_87 --> test_loops_85
    test_loops_85 --> test_loops_88
    test_loops_88 --> test_loops_89
    test_loops_89 --> test_loops_89
end
subgraph testTryCatch
    testTryCatch_90["try ... catch (err)"]
    testTryCatch_91["a += 1"]:::exitNode
    testTryCatch_92["dump(err)"]:::exitNode
    testTryCatch_90 --> testTryCatch_91
    testTryCatch_90 --> testTryCatch_92
end
subgraph testLoops
    testLoops_93["let sum: Int = 0"]
    testLoops_94["let i: Int = 0"]
    testLoops_95["while (i &lt; 10)"]
    testLoops_96["i = i + 1"]
    testLoops_97["sum = sum + i"]
    testLoops_98["until (i &lt;= 0)"]
    testLoops_99["i = i - 1"]
    testLoops_100["sum = sum + i"]
    testLoops_101["repeat (10)"]
    testLoops_102["i = i + 1"]
    testLoops_103["sum = sum + i"]
    testLoops_104["let m: map&lt;Int, Int&gt; = emptyMap()"]
    testLoops_105["m.set(1, 10)"]
    testLoops_106["m.set(2, 20)"]
    testLoops_107["m.set(3, 30)"]
    testLoops_108["foreach ((key, value) of m)"]
    testLoops_109["sum = sum + value"]
    testLoops_93 --> testLoops_94
    testLoops_94 --> testLoops_95
    testLoops_95 --> testLoops_96
    testLoops_96 --> testLoops_97
    testLoops_97 --> testLoops_95
    testLoops_95 --> testLoops_98
    testLoops_98 --> testLoops_99
    testLoops_99 --> testLoops_100
    testLoops_100 --> testLoops_98
    testLoops_98 --> testLoops_101
    testLoops_101 --> testLoops_102
    testLoops_102 --> testLoops_103
    testLoops_103 --> testLoops_101
    testLoops_101 --> testLoops_104
    testLoops_104 --> testLoops_105
    testLoops_105 --> testLoops_106
    testLoops_106 --> testLoops_107
    testLoops_107 --> testLoops_108
    testLoops_108 --> testLoops_109
    testLoops_109 --> testLoops_108
end
subgraph callAsm
    callAsm_110["return s.loadRefEx()"]:::exitNode
end
subgraph toInt
    toInt_111["let string: Slice = self.asSlice()"]
    toInt_112["let acc: Int = 0"]
    toInt_113["while (!string.empty())"]
    toInt_114["let char: Int = string.loadUint(8)"]
    toInt_115["acc = acc * 10 + (char - 48)"]
    toInt_116["return acc"]:::exitNode
    toInt_111 --> toInt_112
    toInt_112 --> toInt_113
    toInt_113 --> toInt_114
    toInt_114 --> toInt_115
    toInt_115 --> toInt_113
    toInt_113 --> toInt_116
end
subgraph TestContract__getter
    TestContract__getter_134["return 0"]:::exitNode
end
subgraph TestContractF__test
end
subgraph TestContractT__test
    TestContractT__test_137["return self.getA()"]:::exitNode
end
subgraph TestContractT__receive_external_fallback_2121
end
subgraph EffectTest__init_2445
    EffectTest__init_2445_138["self.addr = sender()"]
    EffectTest__init_2445_139["self.b = beginCell()"]
    EffectTest__init_2445_140["self.s = S{b: beginCell()}"]:::exitNode
    EffectTest__init_2445_138 --> EffectTest__init_2445_139
    EffectTest__init_2445_139 --> EffectTest__init_2445_140
end
subgraph EffectTest__funcWithSend
    EffectTest__funcWithSend_141["let amount: Int = 100"]
    EffectTest__funcWithSend_142["send(SendParameters{to: self.addr, value: amount})"]:::exitNode
    EffectTest__funcWithSend_141 --> EffectTest__funcWithSend_142
end
subgraph EffectTest__funcWithStateRead
    EffectTest__funcWithStateRead_143["let value = self.addr"]:::exitNode
end
subgraph EffectTest__funcWithStateWrite1
    EffectTest__funcWithStateWrite1_144["self.addr = newAddress(0, 0)"]
    EffectTest__funcWithStateWrite1_145["self.b.storeAddress(self.addr)"]
    EffectTest__funcWithStateWrite1_146["self.s.b.storeAddress(self.addr)"]:::exitNode
    EffectTest__funcWithStateWrite1_144 --> EffectTest__funcWithStateWrite1_145
    EffectTest__funcWithStateWrite1_145 --> EffectTest__funcWithStateWrite1_146
end
subgraph EffectTest__funcWithStateWrite2
    EffectTest__funcWithStateWrite2_147["return s.loadAddress()"]:::exitNode
end
subgraph EffectTest__funcWithMultipleEffects
    EffectTest__funcWithMultipleEffects_148["let currentTime: Int = now()"]
    EffectTest__funcWithMultipleEffects_149["let randValue: Int = random(1, 100)"]
    EffectTest__funcWithMultipleEffects_150["if (1 &gt; 42)"]
    EffectTest__funcWithMultipleEffects_151["nativeRandomizeLt()"]:::exitNode
    EffectTest__funcWithMultipleEffects_148 --> EffectTest__funcWithMultipleEffects_149
    EffectTest__funcWithMultipleEffects_149 --> EffectTest__funcWithMultipleEffects_150
    EffectTest__funcWithMultipleEffects_150 --> EffectTest__funcWithMultipleEffects_151
end
subgraph EffectTest__receive_internal_fallback_2444
    EffectTest__receive_internal_fallback_2444_152["let a = beginString()"]
    EffectTest__receive_internal_fallback_2444_153["a.append('f')"]:::exitNode
    EffectTest__receive_internal_fallback_2444_152 --> EffectTest__receive_internal_fallback_2444_153
end
subgraph A__m
    A__m_154["return self.m"]:::exitNode
end
subgraph A__receive_internal_fallback_2494
    A__receive_internal_fallback_2494_155["while (true)"]
    A__receive_internal_fallback_2494_156["self.m.set(1, 2)"]
    A__receive_internal_fallback_2494_155 --> A__receive_internal_fallback_2494_156
    A__receive_internal_fallback_2494_156 --> A__receive_internal_fallback_2494_155
end
subgraph ContractParams__receive_internal_fallback_2548
end
subgraph Z__getter
    Z__getter_135["return self.a + 1"]:::exitNode
end
subgraph TParent__getA
    TParent__getA_136["return self.a"]:::exitNode
end
