graph TD
subgraph test_try
    test_try_72["try"]
    test_try_73["a += 1"]
    test_try_74["try"]
    test_try_75["try ... catch (err)"]
    test_try_76["a = 19"]:::exitNode
    test_try_77["dump(err)"]:::exitNode
    test_try_72 --> test_try_73
    test_try_73 --> test_try_74
    test_try_74 --> test_try_75
    test_try_75 --> test_try_76
    test_try_75 --> test_try_77
end
subgraph test_loops
    test_loops_78["let sum: Int = 0"]
    test_loops_79["let i: Int = 0"]
    test_loops_80["while (i &lt; 10)"]
    test_loops_81["i = i + 1"]
    test_loops_82["sum = sum + i"]
    test_loops_83["until (i &gt; 10)"]
    test_loops_84["i = i - 1"]
    test_loops_85["sum = sum + i"]
    test_loops_86["repeat (10)"]
    test_loops_87["i = i + 1"]
    test_loops_88["sum = sum + i"]
    test_loops_89["let m: map&lt;Int, Int&gt; = emptyMap()"]
    test_loops_90["foreach ((k, v) of m)"]
    test_loops_78 --> test_loops_79
    test_loops_79 --> test_loops_80
    test_loops_80 --> test_loops_81
    test_loops_81 --> test_loops_82
    test_loops_82 --> test_loops_80
    test_loops_80 --> test_loops_83
    test_loops_83 --> test_loops_84
    test_loops_84 --> test_loops_85
    test_loops_85 --> test_loops_83
    test_loops_83 --> test_loops_86
    test_loops_86 --> test_loops_87
    test_loops_87 --> test_loops_88
    test_loops_88 --> test_loops_86
    test_loops_86 --> test_loops_89
    test_loops_89 --> test_loops_90
    test_loops_90 --> test_loops_90
end
subgraph testTryCatch
    testTryCatch_91["try ... catch (err)"]
    testTryCatch_92["a += 1"]:::exitNode
    testTryCatch_93["dump(err)"]:::exitNode
    testTryCatch_91 --> testTryCatch_92
    testTryCatch_91 --> testTryCatch_93
end
subgraph testLoops
    testLoops_94["let sum: Int = 0"]
    testLoops_95["let i: Int = 0"]
    testLoops_96["while (i &lt; 10)"]
    testLoops_97["i = i + 1"]
    testLoops_98["sum = sum + i"]
    testLoops_99["until (i &lt;= 0)"]
    testLoops_100["i = i - 1"]
    testLoops_101["sum = sum + i"]
    testLoops_102["repeat (10)"]
    testLoops_103["i = i + 1"]
    testLoops_104["sum = sum + i"]
    testLoops_105["let m: map&lt;Int, Int&gt; = emptyMap()"]
    testLoops_106["m.set(1, 10)"]
    testLoops_107["m.set(2, 20)"]
    testLoops_108["m.set(3, 30)"]
    testLoops_109["foreach ((key, value) of m)"]
    testLoops_110["sum = sum + value"]
    testLoops_94 --> testLoops_95
    testLoops_95 --> testLoops_96
    testLoops_96 --> testLoops_97
    testLoops_97 --> testLoops_98
    testLoops_98 --> testLoops_96
    testLoops_96 --> testLoops_99
    testLoops_99 --> testLoops_100
    testLoops_100 --> testLoops_101
    testLoops_101 --> testLoops_99
    testLoops_99 --> testLoops_102
    testLoops_102 --> testLoops_103
    testLoops_103 --> testLoops_104
    testLoops_104 --> testLoops_102
    testLoops_102 --> testLoops_105
    testLoops_105 --> testLoops_106
    testLoops_106 --> testLoops_107
    testLoops_107 --> testLoops_108
    testLoops_108 --> testLoops_109
    testLoops_109 --> testLoops_110
    testLoops_110 --> testLoops_109
end
subgraph callAsm
    callAsm_111["return s.loadRefEx()"]:::exitNode
end
subgraph toInt
    toInt_112["let string: Slice = self.asSlice()"]
    toInt_113["let acc: Int = 0"]
    toInt_114["while (!string.empty())"]
    toInt_115["let char: Int = string.loadUint(8)"]
    toInt_116["acc = acc * 10 + (char - 48)"]
    toInt_117["return acc"]:::exitNode
    toInt_112 --> toInt_113
    toInt_113 --> toInt_114
    toInt_114 --> toInt_115
    toInt_115 --> toInt_116
    toInt_116 --> toInt_114
    toInt_114 --> toInt_117
end
subgraph TestContract__getter
    TestContract__getter_135["return 0"]:::exitNode
end
subgraph TestContractF__test
end
subgraph TestContractT__test
    TestContractT__test_138["return self.getA()"]:::exitNode
end
subgraph TestContractT__receive_external_fallback_2294
end
subgraph EffectTest__init_2618
    EffectTest__init_2618_139["self.addr = sender()"]
    EffectTest__init_2618_140["self.b = beginCell()"]
    EffectTest__init_2618_141["self.s = S{b: beginCell()}"]:::exitNode
    EffectTest__init_2618_139 --> EffectTest__init_2618_140
    EffectTest__init_2618_140 --> EffectTest__init_2618_141
end
subgraph EffectTest__funcWithSend
    EffectTest__funcWithSend_142["let amount: Int = 100"]
    EffectTest__funcWithSend_143["send(SendParameters{to: self.addr, value: amount})"]:::exitNode
    EffectTest__funcWithSend_142 --> EffectTest__funcWithSend_143
end
subgraph EffectTest__funcWithStateRead
    EffectTest__funcWithStateRead_144["let value = self.addr"]:::exitNode
end
subgraph EffectTest__funcWithStateWrite1
    EffectTest__funcWithStateWrite1_145["self.addr = newAddress(0, 0)"]
    EffectTest__funcWithStateWrite1_146["self.b.storeAddress(self.addr)"]
    EffectTest__funcWithStateWrite1_147["self.s.b.storeAddress(self.addr)"]:::exitNode
    EffectTest__funcWithStateWrite1_145 --> EffectTest__funcWithStateWrite1_146
    EffectTest__funcWithStateWrite1_146 --> EffectTest__funcWithStateWrite1_147
end
subgraph EffectTest__funcWithStateWrite2
    EffectTest__funcWithStateWrite2_148["return s.loadAddress()"]:::exitNode
end
subgraph EffectTest__funcWithMultipleEffects
    EffectTest__funcWithMultipleEffects_149["let currentTime: Int = now()"]
    EffectTest__funcWithMultipleEffects_150["let randValue: Int = random(1, 100)"]
    EffectTest__funcWithMultipleEffects_151["if (1 &gt; 42)"]
    EffectTest__funcWithMultipleEffects_152["nativeRandomizeLt()"]:::exitNode
    EffectTest__funcWithMultipleEffects_149 --> EffectTest__funcWithMultipleEffects_150
    EffectTest__funcWithMultipleEffects_150 --> EffectTest__funcWithMultipleEffects_151
    EffectTest__funcWithMultipleEffects_151 --> EffectTest__funcWithMultipleEffects_152
end
subgraph EffectTest__receive_internal_fallback_2617
    EffectTest__receive_internal_fallback_2617_153["let a = beginString()"]
    EffectTest__receive_internal_fallback_2617_154["a.append('f')"]:::exitNode
    EffectTest__receive_internal_fallback_2617_153 --> EffectTest__receive_internal_fallback_2617_154
end
subgraph A__m
    A__m_155["return self.m"]:::exitNode
end
subgraph A__receive_internal_fallback_2667
    A__receive_internal_fallback_2667_156["while (true)"]
    A__receive_internal_fallback_2667_157["self.m.set(1, 2)"]
    A__receive_internal_fallback_2667_156 --> A__receive_internal_fallback_2667_157
    A__receive_internal_fallback_2667_157 --> A__receive_internal_fallback_2667_156
end
subgraph ContractParams__receive_internal_fallback_2721
end
subgraph TestQuickFix__f1
    TestQuickFix__f1_158["while (false)"]
    TestQuickFix__f1_159["while (false)"]
    TestQuickFix__f1_160["dump('something')"]
    TestQuickFix__f1_161["if (1 == 2)"]
    TestQuickFix__f1_162["return true"]:::exitNode
    TestQuickFix__f1_163["return false"]:::exitNode
    TestQuickFix__f1_158 --> TestQuickFix__f1_158
    TestQuickFix__f1_158 --> TestQuickFix__f1_159
    TestQuickFix__f1_159 --> TestQuickFix__f1_160
    TestQuickFix__f1_160 --> TestQuickFix__f1_159
    TestQuickFix__f1_159 --> TestQuickFix__f1_161
    TestQuickFix__f1_161 --> TestQuickFix__f1_162
    TestQuickFix__f1_161 --> TestQuickFix__f1_163
end
subgraph Z__getter
    Z__getter_136["return self.a + 1"]:::exitNode
end
subgraph TParent__getA
    TParent__getA_137["return self.a"]:::exitNode
end
