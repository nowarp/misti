digraph "CallGraph" {
    node [shape=box];
    node_1 [label="init(owner: Address, content: Cell, max_supply: Int)
[StateWrite]"];
    node_2 [label="receive(msg: Mint)
[StateRead]"];
    node_3 [label="receive('Mint: 100')
[StateRead]"];
    node_4 [label="receive('Owner: MintClose')
[StateRead,StateWrite]"];
    node_5 [label="init(master: Address, owner: Address)
[StateWrite]"];
    node_6 [label="receive(msg: TokenTransfer)
[Send,StateRead,StateWrite]"];
    node_7 [label="receive(msg: TokenTransferInternal)
[Send,StateRead,StateWrite]"];
    node_8 [label="get fun msgValue(value: Int): Int
[StateRead]"];
    node_9 [label="receive(msg: TokenBurn)
[Send,StateRead,StateWrite]"];
    node_10 [label="bounced(msg: Slice)
[StateWrite]"];
    node_11 [label="get fun get_wallet_data(): JettonWalletData
[StateRead]"];
    node_12 [label="context"];
    node_13 [label="require"];
    node_14 [label="mint"];
    node_15 [label="ctx::readForwardFee"];
    node_16 [label="min"];
    node_17 [label="ton"];
    node_18 [label="contractAddress"];
    node_19 [label="send"];
    node_20 [label="toCell"];
    node_21 [label="msgValue"];
    node_22 [label="myBalance"];
    node_23 [label="msg::loadUint"];
    node_24 [label="msg::loadCoins"];
    node_2 -> node_12;
    node_2 -> node_13;
    node_2 -> node_13;
    node_2 -> node_14;
    node_3 -> node_12;
    node_3 -> node_13;
    node_3 -> node_14;
    node_4 -> node_12;
    node_4 -> node_13;
    node_6 -> node_12;
    node_6 -> node_13;
    node_6 -> node_15;
    node_6 -> node_15;
    node_6 -> node_13;
    node_6 -> node_16;
    node_6 -> node_17;
    node_6 -> node_13;
    node_6 -> node_18;
    node_6 -> node_19;
    node_6 -> node_20;
    node_7 -> node_12;
    node_7 -> node_13;
    node_7 -> node_18;
    node_7 -> node_13;
    node_7 -> node_19;
    node_7 -> node_20;
    node_7 -> node_21;
    node_7 -> node_15;
    node_7 -> node_19;
    node_7 -> node_20;
    node_8 -> node_22;
    node_8 -> node_16;
    node_9 -> node_12;
    node_9 -> node_13;
    node_9 -> node_13;
    node_9 -> node_15;
    node_9 -> node_13;
    node_9 -> node_19;
    node_9 -> node_20;
    node_10 -> node_23;
    node_10 -> node_23;
    node_10 -> node_24;
    node_10 -> node_13;
}
