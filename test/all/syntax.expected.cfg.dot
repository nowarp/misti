digraph "syntax" {
    node [shape=box];
    subgraph "cluster_test_try" {
        label="test_try";
        "test_try_72" [label="try"];
        "test_try_73" [label="a += 1"];
        "test_try_74" [label="try"];
        "test_try_75" [label="try ... catch (err)"];
        "test_try_76" [label="a = 19",style=filled,fillcolor="#66A7DB"];
        "test_try_77" [label="dump(err)",style=filled,fillcolor="#66A7DB"];
        "test_try_72" -> "test_try_73";
        "test_try_73" -> "test_try_74";
        "test_try_74" -> "test_try_75";
        "test_try_75" -> "test_try_76";
        "test_try_75" -> "test_try_77";
    }
    subgraph "cluster_test_loops" {
        label="test_loops";
        "test_loops_78" [label="let sum: Int = 0"];
        "test_loops_79" [label="let i: Int = 0"];
        "test_loops_80" [label="while (i < 10)"];
        "test_loops_81" [label="i = i + 1"];
        "test_loops_82" [label="sum = sum + i"];
        "test_loops_83" [label="until (i > 10)"];
        "test_loops_84" [label="i = i - 1"];
        "test_loops_85" [label="sum = sum + i"];
        "test_loops_86" [label="repeat (10)"];
        "test_loops_87" [label="i = i + 1"];
        "test_loops_88" [label="sum = sum + i"];
        "test_loops_89" [label="let m: map<Int, Int> = emptyMap()"];
        "test_loops_90" [label="foreach ((k, v) of m)"];
        "test_loops_78" -> "test_loops_79";
        "test_loops_79" -> "test_loops_80";
        "test_loops_80" -> "test_loops_81";
        "test_loops_81" -> "test_loops_82";
        "test_loops_82" -> "test_loops_80";
        "test_loops_80" -> "test_loops_83";
        "test_loops_83" -> "test_loops_84";
        "test_loops_84" -> "test_loops_85";
        "test_loops_85" -> "test_loops_83";
        "test_loops_83" -> "test_loops_86";
        "test_loops_86" -> "test_loops_87";
        "test_loops_87" -> "test_loops_88";
        "test_loops_88" -> "test_loops_86";
        "test_loops_86" -> "test_loops_89";
        "test_loops_89" -> "test_loops_90";
        "test_loops_90" -> "test_loops_90";
    }
    subgraph "cluster_testTryCatch" {
        label="testTryCatch";
        "testTryCatch_91" [label="try ... catch (err)"];
        "testTryCatch_92" [label="a += 1",style=filled,fillcolor="#66A7DB"];
        "testTryCatch_93" [label="dump(err)",style=filled,fillcolor="#66A7DB"];
        "testTryCatch_91" -> "testTryCatch_92";
        "testTryCatch_91" -> "testTryCatch_93";
    }
    subgraph "cluster_testLoops" {
        label="testLoops";
        "testLoops_94" [label="let sum: Int = 0"];
        "testLoops_95" [label="let i: Int = 0"];
        "testLoops_96" [label="while (i < 10)"];
        "testLoops_97" [label="i = i + 1"];
        "testLoops_98" [label="sum = sum + i"];
        "testLoops_99" [label="until (i <= 0)"];
        "testLoops_100" [label="i = i - 1"];
        "testLoops_101" [label="sum = sum + i"];
        "testLoops_102" [label="repeat (10)"];
        "testLoops_103" [label="i = i + 1"];
        "testLoops_104" [label="sum = sum + i"];
        "testLoops_105" [label="let m: map<Int, Int> = emptyMap()"];
        "testLoops_106" [label="m.set(1, 10)"];
        "testLoops_107" [label="m.set(2, 20)"];
        "testLoops_108" [label="m.set(3, 30)"];
        "testLoops_109" [label="foreach ((key, value) of m)"];
        "testLoops_110" [label="sum = sum + value"];
        "testLoops_94" -> "testLoops_95";
        "testLoops_95" -> "testLoops_96";
        "testLoops_96" -> "testLoops_97";
        "testLoops_97" -> "testLoops_98";
        "testLoops_98" -> "testLoops_96";
        "testLoops_96" -> "testLoops_99";
        "testLoops_99" -> "testLoops_100";
        "testLoops_100" -> "testLoops_101";
        "testLoops_101" -> "testLoops_99";
        "testLoops_99" -> "testLoops_102";
        "testLoops_102" -> "testLoops_103";
        "testLoops_103" -> "testLoops_104";
        "testLoops_104" -> "testLoops_102";
        "testLoops_102" -> "testLoops_105";
        "testLoops_105" -> "testLoops_106";
        "testLoops_106" -> "testLoops_107";
        "testLoops_107" -> "testLoops_108";
        "testLoops_108" -> "testLoops_109";
        "testLoops_109" -> "testLoops_110";
        "testLoops_110" -> "testLoops_109";
    }
    subgraph "cluster_callAsm" {
        label="callAsm";
        "callAsm_111" [label="return s.loadRefEx()",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_toInt" {
        label="toInt";
        "toInt_112" [label="let string: Slice = self.asSlice()"];
        "toInt_113" [label="let acc: Int = 0"];
        "toInt_114" [label="while (!string.empty())"];
        "toInt_115" [label="let char: Int = string.loadUint(8)"];
        "toInt_116" [label="acc = acc * 10 + (char - 48)"];
        "toInt_117" [label="return acc",style=filled,fillcolor="#66A7DB"];
        "toInt_112" -> "toInt_113";
        "toInt_113" -> "toInt_114";
        "toInt_114" -> "toInt_115";
        "toInt_115" -> "toInt_116";
        "toInt_116" -> "toInt_114";
        "toInt_114" -> "toInt_117";
    }
    subgraph "cluster_TestContract__getter" {
        label="TestContract__getter";
        "TestContract__getter_135" [label="return 0",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_TestContractF__test" {
        label="TestContractF__test";
    }
    subgraph "cluster_TestContractT__test" {
        label="TestContractT__test";
        "TestContractT__test_138" [label="return self.getA()",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_TestContractT__receive_external_fallback_2294" {
        label="TestContractT__receive_external_fallback_2294";
    }
    subgraph "cluster_EffectTest__init_2618" {
        label="EffectTest__init_2618";
        "EffectTest__init_2618_139" [label="self.addr = sender()"];
        "EffectTest__init_2618_140" [label="self.b = beginCell()"];
        "EffectTest__init_2618_141" [label="self.s = S{b: beginCell()}",style=filled,fillcolor="#66A7DB"];
        "EffectTest__init_2618_139" -> "EffectTest__init_2618_140";
        "EffectTest__init_2618_140" -> "EffectTest__init_2618_141";
    }
    subgraph "cluster_EffectTest__funcWithSend" {
        label="EffectTest__funcWithSend";
        "EffectTest__funcWithSend_142" [label="let amount: Int = 100"];
        "EffectTest__funcWithSend_143" [label="send(SendParameters{to: self.addr, value: amount})",style=filled,fillcolor="#66A7DB"];
        "EffectTest__funcWithSend_142" -> "EffectTest__funcWithSend_143";
    }
    subgraph "cluster_EffectTest__funcWithStateRead" {
        label="EffectTest__funcWithStateRead";
        "EffectTest__funcWithStateRead_144" [label="let value = self.addr",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_EffectTest__funcWithStateWrite1" {
        label="EffectTest__funcWithStateWrite1";
        "EffectTest__funcWithStateWrite1_145" [label="self.addr = newAddress(0, 0)"];
        "EffectTest__funcWithStateWrite1_146" [label="self.b.storeAddress(self.addr)"];
        "EffectTest__funcWithStateWrite1_147" [label="self.s.b.storeAddress(self.addr)",style=filled,fillcolor="#66A7DB"];
        "EffectTest__funcWithStateWrite1_145" -> "EffectTest__funcWithStateWrite1_146";
        "EffectTest__funcWithStateWrite1_146" -> "EffectTest__funcWithStateWrite1_147";
    }
    subgraph "cluster_EffectTest__funcWithStateWrite2" {
        label="EffectTest__funcWithStateWrite2";
        "EffectTest__funcWithStateWrite2_148" [label="return s.loadAddress()",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_EffectTest__funcWithMultipleEffects" {
        label="EffectTest__funcWithMultipleEffects";
        "EffectTest__funcWithMultipleEffects_149" [label="let currentTime: Int = now()"];
        "EffectTest__funcWithMultipleEffects_150" [label="let randValue: Int = random(1, 100)"];
        "EffectTest__funcWithMultipleEffects_151" [label="if (1 > 42)"];
        "EffectTest__funcWithMultipleEffects_152" [label="nativeRandomizeLt()",style=filled,fillcolor="#66A7DB"];
        "EffectTest__funcWithMultipleEffects_149" -> "EffectTest__funcWithMultipleEffects_150";
        "EffectTest__funcWithMultipleEffects_150" -> "EffectTest__funcWithMultipleEffects_151";
        "EffectTest__funcWithMultipleEffects_151" -> "EffectTest__funcWithMultipleEffects_152";
    }
    subgraph "cluster_EffectTest__receive_internal_fallback_2617" {
        label="EffectTest__receive_internal_fallback_2617";
        "EffectTest__receive_internal_fallback_2617_153" [label="let a = beginString()"];
        "EffectTest__receive_internal_fallback_2617_154" [label="a.append(\"f\")",style=filled,fillcolor="#66A7DB"];
        "EffectTest__receive_internal_fallback_2617_153" -> "EffectTest__receive_internal_fallback_2617_154";
    }
    subgraph "cluster_A__m" {
        label="A__m";
        "A__m_155" [label="return self.m",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_A__receive_internal_fallback_2667" {
        label="A__receive_internal_fallback_2667";
        "A__receive_internal_fallback_2667_156" [label="while (true)"];
        "A__receive_internal_fallback_2667_157" [label="self.m.set(1, 2)"];
        "A__receive_internal_fallback_2667_156" -> "A__receive_internal_fallback_2667_157";
        "A__receive_internal_fallback_2667_157" -> "A__receive_internal_fallback_2667_156";
    }
    subgraph "cluster_ContractParams__receive_internal_fallback_2721" {
        label="ContractParams__receive_internal_fallback_2721";
    }
    subgraph "cluster_TestQuickFix__f1" {
        label="TestQuickFix__f1";
        "TestQuickFix__f1_158" [label="while (false)"];
        "TestQuickFix__f1_159" [label="while (false)"];
        "TestQuickFix__f1_160" [label="dump(\"something\")"];
        "TestQuickFix__f1_161" [label="if (1 == 2)"];
        "TestQuickFix__f1_162" [label="return true",style=filled,fillcolor="#66A7DB"];
        "TestQuickFix__f1_163" [label="return false",style=filled,fillcolor="#66A7DB"];
        "TestQuickFix__f1_158" -> "TestQuickFix__f1_158";
        "TestQuickFix__f1_158" -> "TestQuickFix__f1_159";
        "TestQuickFix__f1_159" -> "TestQuickFix__f1_160";
        "TestQuickFix__f1_160" -> "TestQuickFix__f1_159";
        "TestQuickFix__f1_159" -> "TestQuickFix__f1_161";
        "TestQuickFix__f1_161" -> "TestQuickFix__f1_162";
        "TestQuickFix__f1_161" -> "TestQuickFix__f1_163";
    }
    subgraph "cluster_Z__getter" {
        label="Z__getter";
        "Z__getter_136" [label="return self.a + 1",style=filled,fillcolor="#66A7DB"];
    }
    subgraph "cluster_TParent__getA" {
        label="TParent__getA";
        "TParent__getA_137" [label="return self.a",style=filled,fillcolor="#66A7DB"];
    }
"54" -> "67";
"145" -> "64";
"150" -> "35";
}
