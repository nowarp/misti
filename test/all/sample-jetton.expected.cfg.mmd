graph TD
subgraph SampleJetton__init_2277
    SampleJetton__init_2277_93["self.totalSupply = 0"]
    SampleJetton__init_2277_94["self.max_supply = max_supply"]
    SampleJetton__init_2277_95["self.owner = owner"]
    SampleJetton__init_2277_96["self.mintable = true"]
    SampleJetton__init_2277_97["self.content = content"]:::exitNode
    SampleJetton__init_2277_93 --> SampleJetton__init_2277_94
    SampleJetton__init_2277_94 --> SampleJetton__init_2277_95
    SampleJetton__init_2277_95 --> SampleJetton__init_2277_96
    SampleJetton__init_2277_96 --> SampleJetton__init_2277_97
end
subgraph SampleJetton__receive_internal_simple_2223
    SampleJetton__receive_internal_simple_2223_98["let ctx: Context = context()"]
    SampleJetton__receive_internal_simple_2223_99["require(ctx.sender == self.owner, 'Not Owner')"]
    SampleJetton__receive_internal_simple_2223_100["require(self.mintable, 'Can't Mint Anymore')"]
    SampleJetton__receive_internal_simple_2223_101["self.mint(msg.receiver, msg.amount, self.owner)"]:::exitNode
    SampleJetton__receive_internal_simple_2223_98 --> SampleJetton__receive_internal_simple_2223_99
    SampleJetton__receive_internal_simple_2223_99 --> SampleJetton__receive_internal_simple_2223_100
    SampleJetton__receive_internal_simple_2223_100 --> SampleJetton__receive_internal_simple_2223_101
end
subgraph SampleJetton__receive_internal_comment_2250_Mint__100
    SampleJetton__receive_internal_comment_2250_Mint__100_102["let ctx: Context = context()"]
    SampleJetton__receive_internal_comment_2250_Mint__100_103["require(self.mintable, 'Can't Mint Anymore')"]
    SampleJetton__receive_internal_comment_2250_Mint__100_104["self.mint(ctx.sender, 100, self.owner)"]:::exitNode
    SampleJetton__receive_internal_comment_2250_Mint__100_102 --> SampleJetton__receive_internal_comment_2250_Mint__100_103
    SampleJetton__receive_internal_comment_2250_Mint__100_103 --> SampleJetton__receive_internal_comment_2250_Mint__100_104
end
subgraph SampleJetton__receive_internal_comment_2275_Owner__MintClose
    SampleJetton__receive_internal_comment_2275_Owner__MintClose_105["let ctx: Context = context()"]
    SampleJetton__receive_internal_comment_2275_Owner__MintClose_106["require(ctx.sender == self.owner, 'Not Owner')"]
    SampleJetton__receive_internal_comment_2275_Owner__MintClose_107["self.mintable = false"]:::exitNode
    SampleJetton__receive_internal_comment_2275_Owner__MintClose_105 --> SampleJetton__receive_internal_comment_2275_Owner__MintClose_106
    SampleJetton__receive_internal_comment_2275_Owner__MintClose_106 --> SampleJetton__receive_internal_comment_2275_Owner__MintClose_107
end
subgraph JettonDefaultWallet__init_3291
    JettonDefaultWallet__init_3291_126["self.balance = 0"]
    JettonDefaultWallet__init_3291_127["self.owner = owner"]
    JettonDefaultWallet__init_3291_128["self.master = master"]:::exitNode
    JettonDefaultWallet__init_3291_126 --> JettonDefaultWallet__init_3291_127
    JettonDefaultWallet__init_3291_127 --> JettonDefaultWallet__init_3291_128
end
subgraph JettonDefaultWallet__receive_internal_simple_2893
    JettonDefaultWallet__receive_internal_simple_2893_129["let ctx: Context = context()"]
    JettonDefaultWallet__receive_internal_simple_2893_130["require(ctx.sender == self.owner, 'Invalid sender')"]
    JettonDefaultWallet__receive_internal_simple_2893_131["let fwdFee: Int = ctx.readForwardFee() + ctx.readForwardFee()"]
    JettonDefaultWallet__receive_internal_simple_2893_132["let final: Int = 2 * self.gasConsumption + self.minTonsForStorage + fwdFee"]
    JettonDefaultWallet__receive_internal_simple_2893_133["require(ctx.value &gt; min(final, ton('0.01')), 'Invalid value!!')"]
    JettonDefaultWallet__receive_internal_simple_2893_134["self.balance = self.balance - msg.amount"]
    JettonDefaultWallet__receive_internal_simple_2893_135["require(self.balance &gt;= 0, 'Invalid balance')"]
    JettonDefaultWallet__receive_internal_simple_2893_136["let init: StateInit = initOf JettonDefaultWallet(self.master, msg.destination)"]
    JettonDefaultWallet__receive_internal_simple_2893_137["let walletAddress: Address = contractAddress(init)"]
    JettonDefaultWallet__receive_internal_simple_2893_138["send(SendParameters{to: walletAddress, value: 0, mode: SendRemainingValue, bounce: false, body: TokenTransferInternal{queryId: msg.queryId, amount: msg.amount, from: self.owner, response_destination: msg.response_destination, forward_ton_amount: msg.forward_ton_amount, forward_payload: msg.forward_payload}.toCell(), code: init.code, data: init.data})"]:::exitNode
    JettonDefaultWallet__receive_internal_simple_2893_129 --> JettonDefaultWallet__receive_internal_simple_2893_130
    JettonDefaultWallet__receive_internal_simple_2893_130 --> JettonDefaultWallet__receive_internal_simple_2893_131
    JettonDefaultWallet__receive_internal_simple_2893_131 --> JettonDefaultWallet__receive_internal_simple_2893_132
    JettonDefaultWallet__receive_internal_simple_2893_132 --> JettonDefaultWallet__receive_internal_simple_2893_133
    JettonDefaultWallet__receive_internal_simple_2893_133 --> JettonDefaultWallet__receive_internal_simple_2893_134
    JettonDefaultWallet__receive_internal_simple_2893_134 --> JettonDefaultWallet__receive_internal_simple_2893_135
    JettonDefaultWallet__receive_internal_simple_2893_135 --> JettonDefaultWallet__receive_internal_simple_2893_136
    JettonDefaultWallet__receive_internal_simple_2893_136 --> JettonDefaultWallet__receive_internal_simple_2893_137
    JettonDefaultWallet__receive_internal_simple_2893_137 --> JettonDefaultWallet__receive_internal_simple_2893_138
end
subgraph JettonDefaultWallet__receive_internal_simple_3065
    JettonDefaultWallet__receive_internal_simple_3065_139["let ctx: Context = context()"]
    JettonDefaultWallet__receive_internal_simple_3065_140["if (ctx.sender != self.master)"]
    JettonDefaultWallet__receive_internal_simple_3065_141["let sInit: StateInit = initOf JettonDefaultWallet(self.master, msg.from)"]
    JettonDefaultWallet__receive_internal_simple_3065_142["require(contractAddress(sInit) == ctx.sender, 'Invalid sender!')"]
    JettonDefaultWallet__receive_internal_simple_3065_143["self.balance = self.balance + msg.amount"]
    JettonDefaultWallet__receive_internal_simple_3065_144["require(self.balance &gt;= 0, 'Invalid balance')"]
    JettonDefaultWallet__receive_internal_simple_3065_145["if (msg.forward_ton_amount &gt; 0)"]
    JettonDefaultWallet__receive_internal_simple_3065_146["send(SendParameters{to: self.owner, value: msg.forward_ton_amount, bounce: false, body: TokenNotification{queryId: msg.queryId, amount: msg.amount, from: msg.from, forward_payload: msg.forward_payload}.toCell()})"]
    JettonDefaultWallet__receive_internal_simple_3065_147["let msgValue: Int = self.msgValue(ctx.value)"]
    JettonDefaultWallet__receive_internal_simple_3065_148["let fwdFee: Int = ctx.readForwardFee()"]
    JettonDefaultWallet__receive_internal_simple_3065_149["msgValue = msgValue - msg.forward_ton_amount - fwdFee"]
    JettonDefaultWallet__receive_internal_simple_3065_150["if (msg.response_destination != null)"]
    JettonDefaultWallet__receive_internal_simple_3065_151["send(SendParameters{to: msg.response_destination!!, value: msgValue, bounce: false, body: TokenExcesses{queryId: msg.queryId}.toCell(), mode: SendIgnoreErrors})"]:::exitNode
    JettonDefaultWallet__receive_internal_simple_3065_139 --> JettonDefaultWallet__receive_internal_simple_3065_140
    JettonDefaultWallet__receive_internal_simple_3065_140 --> JettonDefaultWallet__receive_internal_simple_3065_141
    JettonDefaultWallet__receive_internal_simple_3065_141 --> JettonDefaultWallet__receive_internal_simple_3065_142
    JettonDefaultWallet__receive_internal_simple_3065_142 --> JettonDefaultWallet__receive_internal_simple_3065_143
    JettonDefaultWallet__receive_internal_simple_3065_143 --> JettonDefaultWallet__receive_internal_simple_3065_144
    JettonDefaultWallet__receive_internal_simple_3065_144 --> JettonDefaultWallet__receive_internal_simple_3065_145
    JettonDefaultWallet__receive_internal_simple_3065_145 --> JettonDefaultWallet__receive_internal_simple_3065_146
    JettonDefaultWallet__receive_internal_simple_3065_146 --> JettonDefaultWallet__receive_internal_simple_3065_147
    JettonDefaultWallet__receive_internal_simple_3065_147 --> JettonDefaultWallet__receive_internal_simple_3065_148
    JettonDefaultWallet__receive_internal_simple_3065_148 --> JettonDefaultWallet__receive_internal_simple_3065_149
    JettonDefaultWallet__receive_internal_simple_3065_149 --> JettonDefaultWallet__receive_internal_simple_3065_150
    JettonDefaultWallet__receive_internal_simple_3065_150 --> JettonDefaultWallet__receive_internal_simple_3065_151
end
subgraph JettonDefaultWallet__msgValue
    JettonDefaultWallet__msgValue_152["let tonBalanceBeforeMsg: Int = myBalance() - value"]
    JettonDefaultWallet__msgValue_153["let storageFee: Int = self.minTonsForStorage - min(tonBalanceBeforeMsg, self.minTonsForStorage)"]
    JettonDefaultWallet__msgValue_154["value -= storageFee + self.gasConsumption"]
    JettonDefaultWallet__msgValue_155["return value"]:::exitNode
    JettonDefaultWallet__msgValue_152 --> JettonDefaultWallet__msgValue_153
    JettonDefaultWallet__msgValue_153 --> JettonDefaultWallet__msgValue_154
    JettonDefaultWallet__msgValue_154 --> JettonDefaultWallet__msgValue_155
end
subgraph JettonDefaultWallet__receive_internal_simple_3212
    JettonDefaultWallet__receive_internal_simple_3212_156["let ctx: Context = context()"]
    JettonDefaultWallet__receive_internal_simple_3212_157["require(ctx.sender == self.owner, 'Invalid sender')"]
    JettonDefaultWallet__receive_internal_simple_3212_158["self.balance = self.balance - msg.amount"]
    JettonDefaultWallet__receive_internal_simple_3212_159["require(self.balance &gt;= 0, 'Invalid balance')"]
    JettonDefaultWallet__receive_internal_simple_3212_160["let fwdFee: Int = ctx.readForwardFee()"]
    JettonDefaultWallet__receive_internal_simple_3212_161["require(ctx.value &gt; fwdFee + 2 * self.gasConsumption + self.minTonsForStorage, 'Invalid value - Burn')"]
    JettonDefaultWallet__receive_internal_simple_3212_162["send(SendParameters{to: self.master, value: 0, mode: SendRemainingValue, bounce: true, body: TokenBurnNotification{queryId: msg.queryId, amount: msg.amount, owner: self.owner, response_destination: self.owner}.toCell()})"]:::exitNode
    JettonDefaultWallet__receive_internal_simple_3212_156 --> JettonDefaultWallet__receive_internal_simple_3212_157
    JettonDefaultWallet__receive_internal_simple_3212_157 --> JettonDefaultWallet__receive_internal_simple_3212_158
    JettonDefaultWallet__receive_internal_simple_3212_158 --> JettonDefaultWallet__receive_internal_simple_3212_159
    JettonDefaultWallet__receive_internal_simple_3212_159 --> JettonDefaultWallet__receive_internal_simple_3212_160
    JettonDefaultWallet__receive_internal_simple_3212_160 --> JettonDefaultWallet__receive_internal_simple_3212_161
    JettonDefaultWallet__receive_internal_simple_3212_161 --> JettonDefaultWallet__receive_internal_simple_3212_162
end
subgraph JettonDefaultWallet__receive_bounce_3257
    JettonDefaultWallet__receive_bounce_3257_163["let op: Int = msg.loadUint(32)"]
    JettonDefaultWallet__receive_bounce_3257_164["let queryId: Int = msg.loadUint(64)"]
    JettonDefaultWallet__receive_bounce_3257_165["let jettonAmount: Int = msg.loadCoins()"]
    JettonDefaultWallet__receive_bounce_3257_166["require(op == 0x178d4519 || op == 0x7bdd97de, 'Invalid bounced message')"]
    JettonDefaultWallet__receive_bounce_3257_167["self.balance = self.balance + jettonAmount"]:::exitNode
    JettonDefaultWallet__receive_bounce_3257_163 --> JettonDefaultWallet__receive_bounce_3257_164
    JettonDefaultWallet__receive_bounce_3257_164 --> JettonDefaultWallet__receive_bounce_3257_165
    JettonDefaultWallet__receive_bounce_3257_165 --> JettonDefaultWallet__receive_bounce_3257_166
    JettonDefaultWallet__receive_bounce_3257_166 --> JettonDefaultWallet__receive_bounce_3257_167
end
subgraph JettonDefaultWallet__get_wallet_data
    JettonDefaultWallet__get_wallet_data_168["return JettonWalletData{balance: self.balance, owner: self.owner, master: self.master, walletCode: initOf JettonDefaultWallet(self.master, self.owner).code}"]:::exitNode
end
subgraph Jetton__receive_internal_simple_2311
    Jetton__receive_internal_simple_2311_108["self.requireOwner()"]
    Jetton__receive_internal_simple_2311_109["self.content = msg.content"]:::exitNode
    Jetton__receive_internal_simple_2311_108 --> Jetton__receive_internal_simple_2311_109
end
subgraph Jetton__receive_internal_simple_2374
    Jetton__receive_internal_simple_2374_110["self.requireWallet(msg.owner)"]
    Jetton__receive_internal_simple_2374_111["self.totalSupply = self.totalSupply - msg.amount"]
    Jetton__receive_internal_simple_2374_112["if (msg.response_destination != null)"]
    Jetton__receive_internal_simple_2374_113["send(SendParameters{to: msg.response_destination!!, value: 0, bounce: false, mode: SendRemainingValue | SendIgnoreErrors, body: TokenExcesses{queryId: msg.queryId}.toCell()})"]:::exitNode
    Jetton__receive_internal_simple_2374_110 --> Jetton__receive_internal_simple_2374_111
    Jetton__receive_internal_simple_2374_111 --> Jetton__receive_internal_simple_2374_112
    Jetton__receive_internal_simple_2374_112 --> Jetton__receive_internal_simple_2374_113
end
subgraph Jetton__mint
    Jetton__mint_114["require(self.totalSupply + amount &lt;= self.max_supply, 'The total supply will be overlapping.')"]
    Jetton__mint_115["self.totalSupply = self.totalSupply + amount"]
    Jetton__mint_116["let wInit: StateInit = self.getJettonWalletInit(to)"]
    Jetton__mint_117["send(SendParameters{to: contractAddress(wInit), value: 0, bounce: false, mode: SendRemainingValue, body: TokenTransferInternal{queryId: 0, amount: amount, from: myAddress(), response_destination: response_destination, forward_ton_amount: 0, forward_payload: emptySlice()}.toCell(), code: wInit.code, data: wInit.data})"]:::exitNode
    Jetton__mint_114 --> Jetton__mint_115
    Jetton__mint_115 --> Jetton__mint_116
    Jetton__mint_116 --> Jetton__mint_117
end
subgraph Jetton__requireWallet
    Jetton__requireWallet_118["let ctx: Context = context()"]
    Jetton__requireWallet_119["let wInit: StateInit = self.getJettonWalletInit(owner)"]
    Jetton__requireWallet_120["require(contractAddress(wInit) == ctx.sender, 'Invalid sender')"]:::exitNode
    Jetton__requireWallet_118 --> Jetton__requireWallet_119
    Jetton__requireWallet_119 --> Jetton__requireWallet_120
end
subgraph Jetton__getJettonWalletInit
    Jetton__getJettonWalletInit_121["return initOf JettonDefaultWallet(myAddress(), address)"]:::exitNode
end
subgraph Jetton__get_jetton_data
    Jetton__get_jetton_data_122["let code: Cell = self.getJettonWalletInit(myAddress()).code"]
    Jetton__get_jetton_data_123["return JettonData{totalSupply: self.totalSupply, mintable: self.mintable, owner: self.owner, content: self.content, walletCode: code}"]:::exitNode
    Jetton__get_jetton_data_122 --> Jetton__get_jetton_data_123
end
subgraph Jetton__get_wallet_address
    Jetton__get_wallet_address_124["let wInit: StateInit = self.getJettonWalletInit(owner)"]
    Jetton__get_wallet_address_125["return contractAddress(wInit)"]:::exitNode
    Jetton__get_wallet_address_124 --> Jetton__get_wallet_address_125
end
