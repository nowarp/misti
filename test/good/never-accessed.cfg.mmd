graph TD
subgraph test1
    test1_68["let a: Int = 20"]
    test1_69["if (true)"]
    test1_70["a = 42"]
    test1_71["return 42"]:::exitNode
    test1_68 --> test1_69
    test1_69 --> test1_70
    test1_70 --> test1_71
end
subgraph test2
    test2_72["while (true)"]
    test2_73["let a: Int = 0"]
    test2_72 --> test2_73
    test2_73 --> test2_72
end
subgraph test3
    test3_74["let a: Int = 20"]
    test3_75["let b: Int = 22"]
    test3_76["let c: Int = 24"]
    test3_77["if (true)"]
    test3_78["c = a + b"]
    test3_79["return c"]:::exitNode
    test3_74 --> test3_75
    test3_75 --> test3_76
    test3_76 --> test3_77
    test3_77 --> test3_78
    test3_78 --> test3_79
end
subgraph test4
    test4_80["let a: Int = 20"]
    test4_81["let b: Int = 22"]
    test4_82["return b"]:::exitNode
    test4_80 --> test4_81
    test4_81 --> test4_82
end
subgraph FieldTest1__init_1751
    FieldTest1__init_1751_83["self.f1 = sender()"]:::exitNode
end
subgraph FieldTest1__use_f1
    FieldTest1__use_f1_84["return self.f1"]:::exitNode
end
subgraph FieldTest1__forEachUse
    FieldTest1__forEachUse_85["let foreachmap: map&lt;Address, Address&gt; = self.foreachmap"]
    FieldTest1__forEachUse_86["foreach ((_, _) of foreachmap)"]
    FieldTest1__forEachUse_85 --> FieldTest1__forEachUse_86
    FieldTest1__forEachUse_86 --> FieldTest1__forEachUse_86
end
subgraph FieldTest2__init_1763
    FieldTest2__init_1763_87["self.f1 = sender()"]:::exitNode
end
subgraph ConstantFieldTest__test
    ConstantFieldTest__test_88["send(SendParameters{to: sender(), bounce: true, value: self.val, mode: SendRemainingValue + SendIgnoreErrors})"]:::exitNode
end
subgraph TestContract__receive_internal_fallback_1801
    TestContract__receive_internal_fallback_1801_89["let test: Int = 123"]:::exitNode
end
subgraph TestContract2__receive_internal_fallback_1808
    TestContract2__receive_internal_fallback_1808_90["let _test: Int = 123"]:::exitNode
end
