graph TD
subgraph Test__tWhile
    Test__tWhile_68["let i: Int = 0"]
    Test__tWhile_69["while (i &lt; 10)"]
    Test__tWhile_70["send(SendParameters{to: sender(), value: i})"]
    Test__tWhile_71["i = i + 1"]
    Test__tWhile_68 --> Test__tWhile_69
    Test__tWhile_69 --> Test__tWhile_70
    Test__tWhile_70 --> Test__tWhile_71
    Test__tWhile_71 --> Test__tWhile_69
end
subgraph Test__tRepeat
    Test__tRepeat_72["repeat (10)"]
    Test__tRepeat_73["send(SendParameters{to: sender(), value: 0})"]
    Test__tRepeat_72 --> Test__tRepeat_73
    Test__tRepeat_73 --> Test__tRepeat_72
end
subgraph Test__tUntil
    Test__tUntil_74["let i: Int = 0"]
    Test__tUntil_75["until (i == 10)"]
    Test__tUntil_76["send(SendParameters{to: sender(), value: i})"]
    Test__tUntil_77["i = i + 1"]
    Test__tUntil_74 --> Test__tUntil_75
    Test__tUntil_75 --> Test__tUntil_76
    Test__tUntil_76 --> Test__tUntil_77
    Test__tUntil_77 --> Test__tUntil_75
end
subgraph Test__tForeach
    Test__tForeach_78["let m: map&lt;Int, Int&gt; = emptyMap()"]
    Test__tForeach_79["foreach ((k, v) of m)"]
    Test__tForeach_80["send(SendParameters{to: sender(), value: v})"]
    Test__tForeach_78 --> Test__tForeach_79
    Test__tForeach_79 --> Test__tForeach_80
    Test__tForeach_80 --> Test__tForeach_79
end
subgraph Test__tNested
    Test__tNested_81["let i: Int = 0"]
    Test__tNested_82["while (i &lt; 10)"]
    Test__tNested_83["repeat (10)"]
    Test__tNested_84["send(SendParameters{to: sender(), value: i})"]
    Test__tNested_85["i = i + 1"]
    Test__tNested_81 --> Test__tNested_82
    Test__tNested_82 --> Test__tNested_83
    Test__tNested_83 --> Test__tNested_84
    Test__tNested_84 --> Test__tNested_83
    Test__tNested_83 --> Test__tNested_85
    Test__tNested_85 --> Test__tNested_82
end
subgraph SendInLoop__init_1869
    SendInLoop__init_1869_86["self.owner = owner"]
    SendInLoop__init_1869_87["self.a = 0"]:::exitNode
    SendInLoop__init_1869_86 --> SendInLoop__init_1869_87
end
subgraph SendInLoop__exampleWhileLoop
    SendInLoop__exampleWhileLoop_88["let i = 0"]
    SendInLoop__exampleWhileLoop_89["while (i &lt; limit)"]
    SendInLoop__exampleWhileLoop_90["i += 1"]
    SendInLoop__exampleWhileLoop_91["let a = send(SendParameters{to: self.owner, value: 0, bounce: false, body: Msg{a: i}.toCell()})"]
    SendInLoop__exampleWhileLoop_88 --> SendInLoop__exampleWhileLoop_89
    SendInLoop__exampleWhileLoop_89 --> SendInLoop__exampleWhileLoop_90
    SendInLoop__exampleWhileLoop_90 --> SendInLoop__exampleWhileLoop_91
    SendInLoop__exampleWhileLoop_91 --> SendInLoop__exampleWhileLoop_89
end
subgraph SendInLoop__testReply
    SendInLoop__testReply_92["let i: Int = 0"]
    SendInLoop__testReply_93["while (i &lt; 5)"]
    SendInLoop__testReply_94["self.reply(Msg{a: i}.toCell())"]
    SendInLoop__testReply_95["i = i + 1"]
    SendInLoop__testReply_92 --> SendInLoop__testReply_93
    SendInLoop__testReply_93 --> SendInLoop__testReply_94
    SendInLoop__testReply_94 --> SendInLoop__testReply_95
    SendInLoop__testReply_95 --> SendInLoop__testReply_93
end
